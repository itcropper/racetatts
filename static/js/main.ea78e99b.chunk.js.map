{"version":3,"sources":["components/header.jsx","utilities/gpxparser.jsx","components/CustomizePanel.jsx","components/ElevationChart.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","distance","pt1","pt2","calcCrow","lat","lon","lat1","lon1","lat2","lon2","dLat","toRad","dLon","a","Math","sin","cos","atan2","sqrt","v","PI","CustomizePanel","onUpload","customs","setCustoms","useState","data","setData","title","setTitle","lineWidth","setLineWidth","lineColor","setLineColor","state","setState","useEffect","name","onChange","e","files","currentTarget","reader","FileReader","addEventListener","event","gpXml","xmlString","DOMParser","parseFromString","parsedData","toGeoJSON","gpx","features","geometry","coordinates","map","point","i","arr","index","elevation","forEach","parseFloat","toFixed","processData","target","result","readAsText","type","placeholder","accept","value","checked","version","viewBox","xmlns","fill","fillRule","transform","d","id","htmlFor","ElevationChart","x","y","xAxis","yAxis","svg","elevationData","onChartLoad","aidStations","container","useRef","top","right","bottom","left","margin","width","setWidth","height","setHeight","path","setPath","current","offsetWidth","parseInt","scaleLinear","range","station","console","log","remove","innerHTML","select","append","attr","axisBottom","scale","ticks","axisLeft","length","domain","max","pt","minDomain","min","maxDomain","call","plotLine","line","curve","curveBasis","datum","drawChart","transition","duration","style","ref","App","setAidStations","file","showElevationAxis","showDistanceAxis","fontSize","unit","size","color","chartIsLoaded","setChartIsLoaded","updateAidStations","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea78e99b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n\r\n    return (\r\n        <header className=\"mb-10 px-10\">\r\n            <h1 className=\"text-4xl\">RaceTats</h1>\r\n            <p className=\"py-4\">Upload your race file to create a custom elevation profile.</p>\r\n            <p className=\"py-4\">Then we send you a temporary tatoo for you to use on race day!</p>\r\n        </header>\r\n    );\r\n}","\r\nimport toGeoJSON from '@mapbox/togeojson';\r\n\r\nconst distance = ({ pt1, pt2 }) => calcCrow(pt1.lat, pt1.lon, pt2.lat, pt2.lon);\r\n\r\nconst calcCrow = (lat1, lon1, lat2, lon2) => {\r\n    var R = 6371; // km\r\n    var dLat = toRad(lat2 - lat1);\r\n    var dLon = toRad(lon2 - lon1);\r\n    lat1 = toRad(lat1);\r\n    lat2 = toRad(lat2);\r\n\r\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var d = R * c;\r\n    return d;\r\n  }\r\n\r\n  // Converts numeric degrees to radians\r\nconst toRad = (v) => v * Math.PI / 180;\r\n\r\nexport const processData = (gpXml) => {\r\n\r\n    const xmlString = (new DOMParser()).parseFromString(gpXml, \"text/xml\")\r\n\r\n    const gpxData = toGeoJSON.gpx(xmlString);\r\n\r\n    const parsedData = gpxData.features[0].geometry.coordinates.map((point, i, arr) => ({ index: i, elevation: point[2], distance: (i === 0 ? 0 : distance({ pt1: { lat: arr[i][0], lon: arr[i][1] }, pt2: { lat: arr[i - 1][0], lon: arr[i - 1][1] } })) }));\r\n\r\n    parsedData.forEach((point, i, arr) => point.distance = i === 0 ? 0 : point.distance + arr[i - 1].distance)\r\n\r\n    parsedData.forEach((point, i, arr) => point.distance = parseFloat(point.distance.toFixed(3)))\r\n\r\n    return parsedData;\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {processData } from '../utilities/gpxparser'\r\n//import { AidStations } from './AidStations';\r\n\r\n\r\n\r\nexport const CustomizePanel = ({onUpload, customs, setCustoms}) => {\r\n\r\n    const [data, setData] = useState(null);\r\n    const [title, setTitle] = useState(\"Crush It!\");\r\n    const [lineWidth, setLineWidth] = useState(3);\r\n    const [lineColor, setLineColor] = useState('rgba(255,0,0,0.9)');\r\n    const [state, setState] = useState(customs);\r\n\r\n    //const [aidStations, setAidStations] = useState(customs.aidStations);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(aidStations);\r\n    // }, [aidStations]);\r\n\r\n    useEffect(() => {\r\n\r\n        setData('null');\r\n\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        const title = {...state};\r\n        state.title = title;\r\n        setState({title})\r\n    }, [title])\r\n\r\n    useEffect(() => {\r\n        setState({...state, lineColor});\r\n    }, [lineColor]);\r\n\r\n    useEffect(() => {\r\n        setState({...state, lineWidth});\r\n    }, [lineWidth]);\r\n\r\n    useEffect(() => {\r\n     setCustoms(state);  \r\n    }, [state]);\r\n\r\n\r\n    useEffect(() => {\r\n        setCustoms(state);\r\n    }, [state])\r\n\r\n    // function processData(gpXml) {\r\n\r\n    //     const xmlString = (new DOMParser()).parseFromString(gpXml, \"text/xml\")\r\n  \r\n    //     const gpxData = toGeoJSON.gpx(xmlString);\r\n\r\n    //     const parsedData = gpxData.features[0].geometry.coordinates.map((point, i, arr) => ({ index: i, elevation: point[2], distance: (i == 0 ? 0 : distance({ pt1: { lat: arr[i][0], lon: arr[i][1] }, pt2: { lat: arr[i - 1][0], lon: arr[i - 1][1] } })) }));\r\n  \r\n    //     parsedData.forEach((point, i, arr) => point.distance = i == 0 ? 0 : point.distance + arr[i - 1].distance)\r\n  \r\n    //     parsedData.forEach((point, i, arr) => point.distance = parseFloat(point.distance.toFixed(3)))\r\n\r\n    //     setData(parsedData);\r\n    //   }\r\n  \r\n  \r\n  \r\n      function loadData(e) {\r\n        const files = e.currentTarget.files[0];\r\n\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', (event) => {\r\n          onUpload(processData(event.target.result));\r\n        });\r\n        reader.readAsText(files);\r\n  \r\n      }\r\n\r\n    return (\r\n        <div className=\"w-11/12 px-2 shadow-xl h-full\">\r\n            <h2 className=\"text-3xl\">Customize</h2>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Upload File</p>\r\n                <input name=\"gps-file\"\r\n                    onChange={loadData}\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"file\" placeholder=\"race.gpx\" accept=\".gpx, .kml\" />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Title</p>\r\n                <input name=\"chart-title\"\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"text\"\r\n                    placeholder=\"Crush It!\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.currentTarget.value)}  />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Line Color</p>\r\n                <input type=\"color\"\r\n                    name=\"line-color\" \r\n                    className=\"w-4/12 ml-2 h-10\" \r\n                    value={lineColor} \r\n                    onChange={e => setLineColor(e.currentTarget.value)} />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Line Width</p>\r\n                <input name=\"line-width\"\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"number\"\r\n                    placeholder=\"3\" \r\n                    value={lineWidth}\r\n                    onChange={e => setLineWidth(e.currentTarget.value)} />\r\n            </div>\r\n\r\n\r\n            <div className=\"customize-field my-4 \">\r\n                <p className=\"text-xl mb-2\">Show Elevation Axis</p>\r\n                <input type=\"checkbox\" name=\"show-elevation-axis\" value=\"yes\" className=\"opacity-0 absolute h-8 w-8\" checked onChange={() => {}} />\r\n                <div className=\"bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500\">\r\n                    <svg className=\"fill-current hidden w-3 h-3 text-blue-600 pointer-events-none\" version=\"1.1\" viewBox=\"0 0 17 12\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <g fill=\"none\" fillRule=\"evenodd\">\r\n                            <g transform=\"translate(-9 -11)\" fill=\"#1F73F1\" fillRule=\"nonzero\">\r\n                                <path\r\n                                    d=\"m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z\" />\r\n                            </g>\r\n                        </g>\r\n                    </svg>\r\n                </div>\r\n\r\n                <div className=\"customize-field my-4 \">\r\n                    <p className=\"text-xl mb-2\">Show Distance Axis</p>\r\n                    <input type=\"checkbox\" name=\"show-distance-axis\" value=\"yes\" className=\"opacity-0 absolute h-8 w-8\" checked onChange={() => {}} />\r\n                    <div\r\n                        className=\"bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500\">\r\n                        <svg className=\"fill-current hidden w-3 h-3 text-blue-600 pointer-events-none\" version=\"1.1\"\r\n                            viewBox=\"0 0 17 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <g fill=\"none\" fillRule=\"evenodd\">\r\n                                <g transform=\"translate(-9 -11)\" fill=\"#1F73F1\" fillRule=\"nonzero\">\r\n                                    <path\r\n                                        d=\"m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z\" />\r\n                                </g>\r\n                            </g>\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"customize-field my-4\">\r\n                        <p className=\"text-xl  mb-2\">Font Size</p>\r\n                        <input\r\n                            className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                            type=\"Number\" />\r\n                    </div>\r\n\r\n                    <div className=\"customize-field my-4 \">\r\n                        <p className=\"text-xl mb-2\">Units</p>\r\n                        <div className=\"flex justify-around flex-col pl-8\">\r\n                            <div className=\"flex flex-row items-baseline\">\r\n                                <input id=\"unit-standard\" className=\"\" type=\"radio\" name=\"unit\" value=\"standard\" checked onChange={() => {}} />\r\n                                <label htmlFor=\"unit-standard\" className=\"pl-2 mb-1 text-lg\">Standard</label>\r\n                            </div>\r\n                            <div className=\"flex flex-row items-baseline\">\r\n                                <input id=\"unit-metric\" className=\"\" type=\"radio\" name=\"unit\" value=\"metric\" checked onChange={() => {}} />\r\n                                <label htmlFor=\"unit-metric\" className=\"pl-2 mb-1 text-lg\">Metric</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* <div className=\"customize-field my-4\">\r\n                        <AidStations aidStations={aidStations} updateStations={setAidStations} />\r\n                    </div> */}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {svg, select, scaleLinear, min, max, axisBottom, axisLeft, line, curveBasis } from 'd3';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\n\r\nexport const ElevationChart = ({ elevationData, onChartLoad, aidStations, customs }) => {\r\n\r\n    let x, y, xAxis, yAxis, svg;\r\n\r\n    const container = useRef(null);\r\n    const [margin, setMargin] = useState({ top: 20, right: 50, bottom: 30, left: 50 });\r\n    const [width, setWidth] = useState(0);\r\n    const [height, setHeight] = useState(0);\r\n    const [path, setPath] = useState(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        setWidth(container.current.offsetWidth - margin.left - margin.right);\r\n        setHeight(parseInt('' + (width * 0.3)) - margin.top - margin.bottom);\r\n\r\n        x = scaleLinear().range([0, width]);\r\n        y = scaleLinear().range([height, 0]);\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        aidStations.forEach(station => {\r\n            console.log('-------', station)\r\n            return;\r\n            /*\r\n            const rowId = e.target.dataset['asid'];\r\n            const id = 'aid-station-' + (parseInt(rowId) + 1);\r\n        \r\n            if(!d3.select('#'+id).empty()){\r\n              if(e.target.name == 'aid-station-distance'){\r\n                const distance = parseFloat(e.target.value);\r\n                let i = 0;\r\n                let xPos = 0;\r\n                while(xPos <= distance && i < data.length){\r\n                  xPos = data[i].distance;\r\n                  i++;\r\n                }\r\n                \r\n                d3.select('#'+id).attr({\r\n                  cx: x(distance),\r\n                });\r\n                d3.select('#'+id).attr({\r\n                  cy: y(data[i].elevation)\r\n                });\r\n              }else if(e.target.name == 'aid-station-size') {\r\n                const r = Math.max(parseFloat(e.target.value || '0'), 6)\r\n                d3.select('#'+id).attr({\r\n                  r,\r\n                  'stroke-width': r + \"px\"\r\n                });\r\n              }else if(e.target.name == 'aid-station-color') {\r\n                d3.select('#'+id).attr({\r\n                  fill: e.target.value,\r\n                  stroke: e.target.value + \"4d\"\r\n                });\r\n              }\r\n            }else{\r\n              svg.append('circle').attr({\r\n                id,\r\n                cy: y(data[0].elevation),\r\n                cx: x(0),\r\n                r: 0,\r\n                fill: '#000000',\r\n                stroke: '#0000004d',\r\n                'stroke-width': \"2px\"\r\n              })\r\n            }\r\n            */\r\n        });\r\n\r\n    }, [aidStations])\r\n\r\n    useEffect(() => {\r\n        onChartLoad(false);\r\n        if(!container){\r\n            return;\r\n        }\r\n        if (svg) {\r\n            svg.remove();\r\n            container.current.innerHTML = '';\r\n        }\r\n\r\n        svg = select(\"#elevation-chart\").append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        xAxis = axisBottom().scale(x).ticks(10);\r\n        yAxis = axisLeft().scale(y).ticks(5);\r\n\r\n        if (elevationData && elevationData.length) {\r\n            drawChart()\r\n        }\r\n\r\n        return () => {\r\n            svg.remove();\r\n            container.current.innerHTML = '';\r\n        }\r\n\r\n    }, [elevationData]);\r\n\r\n    useEffect(() => {\r\n      select('.elevation-path')\r\n        .transition()\r\n        .duration(1000)\r\n        .style(\"stroke\", customs.lineColor || 'blue')\r\n        .style('stroke-width', `${customs.lineWidth || 3}px`);\r\n\r\n    }, [customs]);\r\n\r\n    useEffect(() =>{ \r\n      //console.log('--------------- customs ---------------');\r\n      //console.dir(customs);\r\n      path && path.datum(elevationData)\r\n      .style(\"fill\", \"none\")\r\n      .style(\"stroke\", customs.lineColor || 'blue')\r\n      .style(\"stroke-width\", `${customs.lineWidth || 5}px`)\r\n    }, [path]);\r\n\r\n    function drawChart() {\r\n\r\n        x.domain([0, max(elevationData, pt => pt.distance)]);\r\n\r\n        const minDomain = min(elevationData, pt => pt.elevation);\r\n        const maxDomain = max(elevationData, pt => pt.elevation)\r\n\r\n        y.domain([\r\n            minDomain - minDomain * 0.05,\r\n            maxDomain * 1.05\r\n        ]);\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"x-axis\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(xAxis);\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"y-axis\")\r\n            .call(yAxis);\r\n\r\n\r\n        svg.append(\"line\")\r\n            .attr(\r\n                {\r\n                    \"class\": \"horizontalGrid-start\",\r\n                    \"x1\": 0,\r\n                    \"x2\": x(elevationData[elevationData.length - 1].index),\r\n                    \"y1\": y(elevationData[0].elevation),\r\n                    \"y2\": y(elevationData[0].elevation),\r\n                    \"fill\": \"none\",\r\n                    \"shape-rendering\": \"crispEdges\",\r\n                    \"stroke\": \"black\",\r\n                    \"stroke-width\": \"1px\",\r\n                    \"stroke-dasharray\": (\"3, 3\")\r\n                });\r\n\r\n        svg.append(\"line\")\r\n            .attr(\r\n                {\r\n                    \"class\": \"horizontalGrid-lowest\",\r\n                    \"x1\": 0,\r\n                    \"x2\": x(elevationData[elevationData.length - 1].index),\r\n                    \"y1\": y(min(elevationData, pt => pt.elevation)),\r\n                    \"y2\": y(min(elevationData, pt => pt.elevation)),\r\n                    \"fill\": \"none\",\r\n                    \"shape-rendering\": \"crispEdges\",\r\n                    \"stroke\": \"black\",\r\n                    \"stroke-width\": \"2px\",\r\n                    \"stroke-dasharray\": (\"2, 10\")\r\n                });\r\n\r\n\r\n\r\n        const plotLine = line()\r\n            .curve(curveBasis)\r\n            .x(d => x(d.distance))\r\n            .y(d => y(d.elevation));\r\n\r\n        \r\n        if(!path) {\r\n          setPath(svg.append(\"g\").append(\"path\")\r\n              .datum(elevationData)\r\n              .attr(\"d\", plotLine)\r\n              .attr('class', 'elevation-path'));\r\n        }\r\n        onChartLoad(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"elevation-chart\" ref={container}></div>\r\n    )\r\n};","// import logo from './logo.svg';\nimport { Header } from './components/header';\nimport { CustomizePanel } from './components/CustomizePanel';\nimport { ElevationChart } from './components/ElevationChart';\nimport './App.css';\nimport {useState, useEffect} from 'react';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const [aidStations, setAidStations] = useState([]);\n\n  const [customs, setCustoms] = useState({\n    file: '',\n    title: '',\n    lineColor: '#ff0000ad',\n    lineWidth: 3,\n    showElevationAxis: true,\n    showDistanceAxis: true,\n    fontSize: 14,\n    unit: 'standard',\n    aidStations: [{distance: 0, size: 1, color: \"#000000ad\"}]\n  });\n  \n  const [chartIsLoaded, setChartIsLoaded] = useState(false);\n\n  // useEffect(() => {\n  //   if(data){\n  //   }\n  // }, [data])\n\n  // useEffect(() => {\n\n  // }, [customs])\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"flex \">\n        <div className=\"w-3/12  max-w-md \">\n          <CustomizePanel onUpload={setData} customs={customs} setCustoms={setCustoms} updateAidStations={setAidStations} />\n        </div>\n        <main className=\"w-9/12\">\n          {\n            chartIsLoaded && \n            <div className=\"flex justify-end px-8\">\n              <button className=\"save-button whitespace-nowrap inline-flex rounded-md bg-blue-500 my-5 py-2 px-10 text-base font-semibold uppercase text-white hover:bg-opacity-90\">Save</button>\n          </div>\n          }\n\n          <ElevationChart \n            elevationData={data} \n            onChartLoad={setChartIsLoaded} \n            aidStations={aidStations}\n            customs={customs} />\n\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}