{"version":3,"sources":["components/header.jsx","utilities/gpxparser.jsx","components/AidStations.jsx","components/CustomizePanel.jsx","components/ElevationChart.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","distance","pt1","pt2","calcCrow","lat","lon","lat1","lon1","lat2","lon2","dLat","toRad","dLon","a","Math","sin","cos","atan2","sqrt","v","PI","AidStationRow","size","color","id","onUpdate","useState","dist","setDist","s","setS","c","setC","useEffect","class","type","placeholder","name","onChange","e","currentTarget","value","circleSpacing","colors","onInput","AidStations","updateStations","_defaultStation","stationList","setStationsList","JSON","stringify","updateStation","station","st","find","Object","assign","filter","map","i","onClick","newStation","length","slice","CustomizePanel","onUpload","customs","setCustoms","data","setData","lineColor","state","setState","aidStations","setAidStations","files","reader","FileReader","addEventListener","event","gpXml","xmlString","DOMParser","parseFromString","parsedData","toGeoJSON","gpx","features","geometry","coordinates","point","arr","index","elevation","segmentLength","forEach","d","console","log","km","miles","parseFloat","toFixed","processData","target","result","readAsText","accept","onKeyUp","title","hex","lineWidth","checked","showElevationLines","version","viewBox","xmlns","fill","fillRule","transform","showDistanceLines","htmlFor","ElevationChart","x","y","xAxis","yAxis","elevationData","onChartLoad","container","useRef","top","right","bottom","left","margin","width","setWidth","height","setHeight","path","setPath","setLineColor","setLineWidth","chartTitle","setChartTitle","setShowElevationLines","setShowDistanceLines","units","svg","current","offsetWidth","parseInt","scaleLinear","range","remove","innerHTML","select","append","attr","axisBottom","scale","ticks","axisLeft","domain","max","pt","minDomain","min","maxDomain","call","style","text","plotLine","line","curve","curveBasis","datum","drawChart","transition","duration","selectAll","ref","App","file","fontSize","unit","chartIsLoaded","setChartIsLoaded","updateAidStations","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da44a32d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n\r\n    return (\r\n        <header className=\"mb-10 px-10\">\r\n            <h1 className=\"text-4xl\">RaceTats</h1>\r\n            <p className=\"py-4\">Upload your race file to create a custom elevation profile.</p>\r\n            <p className=\"py-4\">Then we send you a temporary tatoo for you to use on race day!</p>\r\n        </header>\r\n    );\r\n}","\r\nimport toGeoJSON from '@mapbox/togeojson';\r\n\r\nconst distance = ({ pt1, pt2 }) => calcCrow(pt1.lat, pt1.lon, pt2.lat, pt2.lon);\r\n\r\nconst calcCrow = (lat1, lon1, lat2, lon2) => {\r\n    var R = 6371; // km\r\n    var dLat = toRad(lat2 - lat1);\r\n    var dLon = toRad(lon2 - lon1);\r\n    lat1 = toRad(lat1);\r\n    lat2 = toRad(lat2);\r\n\r\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var d = R * c;\r\n    return d;\r\n  }\r\n\r\n  // Converts numeric degrees to radians\r\nconst toRad = (v) => v * Math.PI / 180;\r\n\r\nexport const processData = (gpXml) => {\r\n\r\n    const xmlString = (new DOMParser()).parseFromString(gpXml, \"text/xml\")\r\n\r\n    const gpxData = toGeoJSON.gpx(xmlString);\r\n\r\n    let parsedData = gpxData.features[0].geometry.coordinates.map((point, i, arr) => (\r\n      { \r\n        index: i, \r\n        elevation: point[2], \r\n        distance: 0,\r\n        segmentLength: (i === 0 \r\n          ? 0 \r\n          : distance({ \r\n            pt1: { \r\n              lat: arr[i][0], \r\n              lon: arr[i][1] \r\n            }, \r\n            pt2: { \r\n              lat: arr[i - 1][0], \r\n              lon: arr[i - 1][1] \r\n            } \r\n          })) \r\n        }));\r\n\r\n    parsedData.forEach((d,i,arr) => d.distance = d.segmentLength + (i === 0 ? 0 : arr[i-1].distance));\r\n\r\n    console.log(parsedData[parsedData.length - 1].distance);\r\n\r\n\r\n    // parsedData = parsedData.map((point, i, arr) => {\r\n    //   const distance = i === 0 ? 0 : arr[i].distance + arr[i-1].distance;\r\n    //   if(i % 9 === 0){\r\n    //     console.log(\"----distance\");\r\n    //     console.log(distance);\r\n    //     debugger;\r\n    //   }\r\n      \r\n    //   return {\r\n    //     ...point,\r\n    //     distance\r\n    //   }\r\n    // });\r\n\r\n    parsedData = parsedData.map((point, i, arr) => {\r\n      const km = arr[i].distance;\r\n      const miles = km * 0.621371;\r\n      return {\r\n        ...point, \r\n        distance: {\r\n          km: parseFloat(km.toFixed(3)),\r\n          miles: parseFloat(miles.toFixed(3))\r\n        }\r\n      };\r\n    });\r\n\r\n    return parsedData;\r\n}","import React, {useEffect, useState} from 'react'\r\nimport { CirclePicker } from 'react-color';\r\n\r\nconst AidStationRow = ({distance = 0, size = 0, color = \"#000000\", id, onUpdate}) => {\r\n\r\n    const [dist, setDist] = useState(distance);\r\n    const [s, setS] = useState(size);\r\n    const [c, setC] = useState(color);\r\n\r\n\r\n    useEffect(() => {\r\n        onUpdate({distance: dist, size: s, color: c, id});\r\n    }, [dist, s, c, id, onUpdate])\r\n\r\n    return (\r\n        <div className=\"aid-station-row mb-4 items-center flex flex-row \">\r\n            <div className=\"flex flex-col\">\r\n                <div class=\"flex flex-row\">\r\n                    <input\r\n                        className=\"py-2 pl-4 w-6/12 mr-2 focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md\"\r\n                        type=\"number\"\r\n                        placeholder=\"Distance\" \r\n                        name=\"aid-station-distance\" \r\n                        onChange={(e) => setDist(e.currentTarget.value)}/>\r\n                    <input\r\n                        className=\"py-2 pl-4 w-2/12 mr-2 focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md\"\r\n                        type=\"number\" \r\n                        placeholder=\"Size\" \r\n                        name=\"aid-station-size\" \r\n                        onChange={(e) => setS(e.currentTarget.value)} />\r\n                </div>\r\n                <CirclePicker \r\n                    name=\"aid-station-color\" \r\n                    circleSpacing={20}\r\n                    colors={[\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\"]}\r\n                    className=\"circle-picker w-full mr-2 flex justify-between h-20 items-center\" \r\n                    value={c}\r\n                    onInput={e => setC(e.currentTarget.value)} />\r\n            </div>\r\n            <button className=\"w-1/12\">X</button>\r\n        </div>);\r\n}\r\n\r\nexport const AidStations = ({updateStations}) => {\r\n\r\n    const  _defaultStation = {distance: 0, size: 1, color: \"#000000\", id:0}\r\n\r\n    const [stationList, setStationsList] = useState([_defaultStation]);\r\n\r\n    useEffect(() => {\r\n        // updateStations(stationList);\r\n        //console.log(stationList);\r\n    }, [JSON.stringify(stationList)]);\r\n\r\n    const addStation = (e) => {\r\n        const newStation = stationList.length ? {...stationList.slice(-1)[0] , id: stationList.length} : _defaultStation;\r\n        setStationsList([...stationList, newStation]);\r\n    }\r\n\r\n    const updateStation = (station) => {\r\n        if(!station){return;}\r\n        let st = stationList.find(s => s.id === station.id);\r\n        // console.log(st, station);\r\n        st = Object.assign({}, st, station);\r\n        const updatedStations = [...stationList.filter(s => s.id !== station.id)];\r\n        // setStationsList(updatedStations);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <p className=\"text-xl mb-2\">Include Aid Stations</p>\r\n            <div className=\"aid-stations-container\">\r\n                {\r\n                    stationList.map((station, i) => <AidStationRow station={station} id={i} onUpdate={updateStation} key={i} />)\r\n                }\r\n            </div>\r\n            <button className=\"add-aid-station whitespace-nowrap inline-flex rounded-md bg-blue-500 py-2 px-3 text-xs font-semibold uppercase text-white hover:bg-opacity-90\" onClick={addStation}>+ Aid Station</button>\r\n        </>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {processData } from '../utilities/gpxparser'\r\nimport { CirclePicker  } from 'react-color';\r\nimport { AidStations } from './AidStations';\r\n\r\n\r\n\r\nexport const CustomizePanel = ({onUpload, customs, setCustoms}) => {\r\n\r\n    const [data, setData] = useState(null);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [lineWidth, setLineWidth] = useState(3);\r\n    const [lineColor, setLineColor] = useState(customs.lineColor || '#9c27b0');\r\n    const [showElevationLines, setShowElevationLines] = useState(true);\r\n    const [showDistanceLines, setShowDistanceLines] = useState(true);\r\n    const [state, setState] = useState(customs);\r\n\r\n    const [aidStations, setAidStations] = useState(customs.aidStations);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(aidStations);\r\n    // }, [aidStations]);\r\n\r\n    useEffect(() => {\r\n\r\n        setData('null');\r\n\r\n    }, [data]);\r\n\r\n    // useEffect(() => {\r\n    //     setState({...state, lineColor, lineWidth, title, showElevationLines, showDistanceLines});\r\n    // }, [lineColor, lineWidth, title]);\r\n\r\n    useEffect(() => {\r\n        setCustoms(state);\r\n    }, [state])\r\n\r\n\r\n    // function processData(gpXml) {\r\n\r\n    //     const xmlString = (new DOMParser()).parseFromString(gpXml, \"text/xml\")\r\n  \r\n    //     const gpxData = toGeoJSON.gpx(xmlString);\r\n\r\n    //     const parsedData = gpxData.features[0].geometry.coordinates.map((point, i, arr) => ({ index: i, elevation: point[2], distance: (i == 0 ? 0 : distance({ pt1: { lat: arr[i][0], lon: arr[i][1] }, pt2: { lat: arr[i - 1][0], lon: arr[i - 1][1] } })) }));\r\n  \r\n    //     parsedData.forEach((point, i, arr) => point.distance = i == 0 ? 0 : point.distance + arr[i - 1].distance)\r\n  \r\n    //     parsedData.forEach((point, i, arr) => point.distance = parseFloat(point.distance.toFixed(3)))\r\n\r\n    //     setData(parsedData);\r\n    //   }\r\n  \r\n  \r\n  \r\n      function loadData(e) {\r\n        const files = e.currentTarget.files[0];\r\n\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', (event) => {\r\n          onUpload(processData(event.target.result));\r\n        });\r\n        reader.readAsText(files);\r\n  \r\n      }\r\n\r\n    return (\r\n        <div className=\"w-11/12 px-2 shadow-xl h-full\">\r\n            <h2 className=\"text-3xl\">Customize</h2>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Upload File</p>\r\n                <input name=\"gps-file\"\r\n                    onChange={loadData}\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"file\" placeholder=\"race.gpx\" accept=\".gpx, .kml\" />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Title</p>\r\n                <input name=\"chart-title\"\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"text\"\r\n                    placeholder=\"Crush It!\"\r\n                    onKeyUp={e => setState({...state, title: e.currentTarget.value})} />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Line Color</p>\r\n                <CirclePicker onChange={ e => setState({ ...state, lineColor: e.hex }) }   />\r\n                {/* <input type=\"color\"\r\n                    name=\"line-color\" \r\n                    className=\"w-4/12 ml-2 h-10\" \r\n                    value={lineColor} \r\n                    onChange={e => setState({...state, lineColor: e.currentTarget.value})} /> */}\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Line Width</p>\r\n                <input name=\"line-width\"\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"number\"\r\n                    placeholder=\"3\" \r\n                    onChange={e => setState({...state, lineWidth: e.currentTarget.value})} />\r\n            </div>\r\n\r\n\r\n            <div className=\"customize-field my-4 \">\r\n                <p className=\"text-xl mb-2\">Show Elevation Axis</p>\r\n                <input type=\"checkbox\" name=\"show-elevation-axis\" value=\"yes\" className=\"opacity-0 absolute h-8 w-8\" checked={state.showElevationLines} onChange={e =>setState({...state, showElevationLines: e.target.checked})} />\r\n                <div className=\"bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500\">\r\n                    <svg className=\"fill-current hidden w-3 h-3 text-blue-600 pointer-events-none\" version=\"1.1\" viewBox=\"0 0 17 12\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <g fill=\"none\" fillRule=\"evenodd\">\r\n                            <g transform=\"translate(-9 -11)\" fill=\"#1F73F1\" fillRule=\"nonzero\">\r\n                                <path\r\n                                    d=\"m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z\" />\r\n                            </g>\r\n                        </g>\r\n                    </svg>\r\n                </div>\r\n\r\n                <div className=\"customize-field my-4 \">\r\n                    <p className=\"text-xl mb-2\">Show Distance Axis</p>\r\n                    <input type=\"checkbox\" name=\"show-distance-axis\" value=\"yes\" className=\"opacity-0 absolute h-8 w-8\" checked={state.showDistanceLines} onChange={e =>setState({...state, showDistanceLines: e.target.checked})} />\r\n                    <div\r\n                        className=\"bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500\">\r\n                        <svg className=\"fill-current hidden w-3 h-3 text-blue-600 pointer-events-none\" version=\"1.1\"\r\n                            viewBox=\"0 0 17 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <g fill=\"none\" fillRule=\"evenodd\">\r\n                                <g transform=\"translate(-9 -11)\" fill=\"#1F73F1\" fillRule=\"nonzero\">\r\n                                    <path\r\n                                        d=\"m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z\" />\r\n                                </g>\r\n                            </g>\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"customize-field my-4\">\r\n                        <p className=\"text-xl  mb-2\">Font Size</p>\r\n                        <input\r\n                            className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                            type=\"Number\" />\r\n                    </div>\r\n\r\n                    <div className=\"customize-field my-4 \">\r\n                        <p className=\"text-xl mb-2\">Units</p>\r\n                        <div className=\"flex justify-around flex-col pl-8\">\r\n                            <div className=\"flex flex-row items-baseline\">\r\n                                <input id=\"unit-standard\" className=\"\" type=\"radio\" name=\"unit\" value=\"standard\" checked onChange={() => {}} />\r\n                                <label htmlFor=\"unit-standard\" className=\"pl-2 mb-1 text-lg\">Standard</label>\r\n                            </div>\r\n                            <div className=\"flex flex-row items-baseline\">\r\n                                <input id=\"unit-metric\" className=\"\" type=\"radio\" name=\"unit\" value=\"metric\" checked onChange={() => {}} />\r\n                                <label htmlFor=\"unit-metric\" className=\"pl-2 mb-1 text-lg\">Metric</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"customize-field my-4\">\r\n                        <AidStations aidStations={aidStations} updateStations={setAidStations} />\r\n                    </div> \r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {select, selectAll, scaleLinear, min, max, axisBottom, axisLeft, line, curveBasis}  from 'd3';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\n\r\nexport const ElevationChart = ({ elevationData, onChartLoad, aidStations, customs }) => {\r\n\r\n    let x, y, xAxis, yAxis;\r\n\r\n    const container = useRef(null);\r\n    const [margin, setMargin] = useState({ top: 20, right: 50, bottom: 30, left: 50 });\r\n    const [width, setWidth] = useState(0);\r\n    const [height, setHeight] = useState(0);\r\n    const [path, setPath] = useState(null);\r\n    const [lineColor, setLineColor] = useState(customs.lineColor || \"#ff0000ad\");\r\n    const [lineWidth, setLineWidth] = useState(customs.lineWidth || 3);\r\n    const [chartTitle, setChartTitle] = useState(customs.title || '');\r\n    const [showElevationLines, setShowElevationLines] = useState(customs.showElevationLines);\r\n    const [showDistanceLines, setShowDistanceLines] = useState(customs.showDistanceLines);\r\n    const [units, setUnits] = useState('km');\r\n\r\n    let svg = useRef(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        setWidth(container.current.offsetWidth - margin.left - margin.right);\r\n        setHeight(parseInt('' + (width * 0.3)) - margin.top - margin.bottom);\r\n\r\n        x = scaleLinear().range([0, width]);\r\n        y = scaleLinear().range([height, 0]);\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        aidStations.forEach(station => {\r\n            console.log('-------', station)\r\n            return;\r\n            /*\r\n            const rowId = e.target.dataset['asid'];\r\n            const id = 'aid-station-' + (parseInt(rowId) + 1);\r\n        \r\n            if(!d3.select('#'+id).empty()){\r\n              if(e.target.name == 'aid-station-distance'){\r\n                const distance = parseFloat(e.target.value);\r\n                let i = 0;\r\n                let xPos = 0;\r\n                while(xPos <= distance && i < data.length){\r\n                  xPos = data[i].distance;\r\n                  i++;\r\n                }\r\n                \r\n                d3.select('#'+id).attr({\r\n                  cx: x(distance),\r\n                });\r\n                d3.select('#'+id).attr({\r\n                  cy: y(data[i].elevation)\r\n                });\r\n              }else if(e.target.name == 'aid-station-size') {\r\n                const r = Math.max(parseFloat(e.target.value || '0'), 6)\r\n                d3.select('#'+id).attr({\r\n                  r,\r\n                  'stroke-width': r + \"px\"\r\n                });\r\n              }else if(e.target.name == 'aid-station-color') {\r\n                d3.select('#'+id).attr({\r\n                  fill: e.target.value,\r\n                  stroke: e.target.value + \"4d\"\r\n                });\r\n              }\r\n            }else{\r\n              svg.append('circle').attr({\r\n                id,\r\n                cy: y(data[0].elevation),\r\n                cx: x(0),\r\n                r: 0,\r\n                fill: '#000000',\r\n                stroke: '#0000004d',\r\n                'stroke-width': \"2px\"\r\n              })\r\n            }\r\n            */\r\n        });\r\n\r\n    }, [aidStations])\r\n\r\n    useEffect(() => {\r\n        onChartLoad(false);\r\n        if(!container){\r\n            return;\r\n        }\r\n        if (svg.current) {\r\n            svg.current.remove();\r\n            container.current.innerHTML = '';\r\n        }\r\n\r\n        svg.current = select(\"#elevation-chart\").append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        xAxis = axisBottom().scale(x).ticks(10);\r\n        yAxis = axisLeft().scale(y).ticks(5);\r\n\r\n        if (elevationData && elevationData.length) {\r\n            drawChart()\r\n        }\r\n\r\n        return () => {\r\n            svg.current.remove();\r\n            container.current.innerHTML = '';\r\n        }\r\n\r\n    }, [elevationData]);\r\n\r\n    useEffect(() => {\r\n\r\n      select('.elevation-path')\r\n        .transition()\r\n        .duration(1000)\r\n        .style(\"stroke\", customs.lineColor || 'blue')\r\n        .style('stroke-width', `${customs.lineWidth || 3}px`);\r\n\r\n    }, [customs]);\r\n\r\n    useEffect(() => {\r\n      select('.chart-title')\r\n      .text(chartTitle);\r\n    }, [chartTitle])\r\n\r\n    useEffect(() => {\r\n\r\n      if(lineColor != customs.lineColor){\r\n        setLineColor(customs.lineColor);\r\n      }\r\n      if(chartTitle != customs.title){\r\n        setChartTitle(customs.title);\r\n      }\r\n      if(lineWidth != customs.lineWidth){\r\n        setLineWidth(customs.lineWidth);\r\n      }\r\n      if(showElevationLines != customs.showElevationLines){\r\n        setShowElevationLines(customs.showElevationLines);\r\n      }\r\n      if(showDistanceLines != customs.showDistanceLines) {\r\n        setShowDistanceLines(customs.showDistanceLines);\r\n      }\r\n    }, [customs])\r\n\r\n    useEffect(() => {\r\n      if(!svg.current){\r\n        return;\r\n      }\r\n      svg.current.selectAll('.y-axis,.horizontalGrid-start,.horizontalGrid-lowest')\r\n        .transition()\r\n        .duration(1000)\r\n        .style('opacity', showElevationLines ? 1 : 0);\r\n\r\n    }, [showElevationLines])\r\n    \r\n    useEffect(() => {\r\n      if(!svg.current){\r\n        return;\r\n      }\r\n      svg.current.selectAll('.x-axis')\r\n        .transition()\r\n        .duration(1000)\r\n        .style('opacity', showDistanceLines ? 1 : 0);\r\n\r\n    }, [showDistanceLines])\r\n\r\n    useEffect(() =>{ \r\n      path && path.datum(elevationData)\r\n      .transition()\r\n      .duration(1000)\r\n      .attr('fill', 'none')\r\n      .style(\"stroke-width\", `${customs.lineWidth}px`)\r\n    }, [lineWidth]);\r\n\r\n    useEffect(() =>{ \r\n      path && path.datum(elevationData)\r\n      .transition()\r\n      .duration(1000)\r\n      .attr('fill', 'none')\r\n      .style(\"stroke\", customs.lineColor)\r\n    }, [lineColor]);\r\n\r\n    function drawChart() {\r\n\r\n        x.domain([0, max(elevationData, pt => pt.distance[units === 'km' ? 'km' : 'miles'])]);\r\n\r\n        const minDomain = min(elevationData, pt => pt.elevation);\r\n        const maxDomain = max(elevationData, pt => pt.elevation)\r\n\r\n        y.domain([\r\n            minDomain - minDomain * 0.05,\r\n            maxDomain * 1.05\r\n        ]);\r\n\r\n        svg.current.append(\"g\")\r\n            .attr(\"class\", \"x-axis\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(xAxis);\r\n\r\n        svg.current.append(\"g\")\r\n            .attr(\"class\", \"y-axis\")\r\n            .call(yAxis);\r\n\r\n\r\n         svg.current.append(\"line\")\r\n              .attr('class', \"horizontalGrid-start\")\r\n              .attr('x1', 0)\r\n              .attr('x2', x(elevationData[elevationData.length - 1].index))\r\n              .attr('y1', y(elevationData[0].elevation))\r\n              .attr('y2', y(elevationData[0].elevation))\r\n              .attr('fill', 'none')\r\n              .attr('stroke', 'black')\r\n              .attr('stroke-width', '1px')\r\n              .attr('stroke-dasharray', \"3,3\");\r\n\r\n        svg.current.append(\"line\")\r\n            .attr('class', \"horizontalGrid-lowest\")\r\n            .attr('x1', 0)\r\n            .attr('x2', x(elevationData[elevationData.length - 1].index))\r\n            .attr('y1', y(min(elevationData, pt => pt.elevation)))\r\n            .attr('y2', y(min(elevationData, pt => pt.elevation)))\r\n            .attr('fill', 'none')\r\n            .attr('stroke', 'black')\r\n            .attr('stroke-width', '2px')\r\n            .attr('stroke-dasharray', \"2, 10\");\r\n\r\n        svg.current.append(\"text\")\r\n          .attr('class', 'chart-title')\r\n          .attr(\"x\", (width / 2))             \r\n          //.attr(\"y\", 0 - (margin.top / 2))\r\n          .attr(\"text-anchor\", \"middle\")  \r\n          .style(\"font-size\", \"24px\") \r\n          .text(chartTitle);\r\n\r\n\r\n\r\n        const plotLine = line()\r\n            .curve(curveBasis)\r\n            .x(d => x(d.distance[units === 'km' ? 'km' : 'standard']))\r\n            .y(d => y(d.elevation));\r\n\r\n        \r\n        if(!path) {\r\n          setPath(svg.current.append(\"g\").append(\"path\")\r\n              .datum(elevationData)\r\n              .attr(\"d\", plotLine)\r\n              .attr('stroke', 'black')\r\n              .attr('stroke-width', '3px')\r\n              .attr('fill', 'none')\r\n              .attr('class', 'elevation-path'));\r\n        }\r\n        onChartLoad(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"elevation-chart\" ref={container}></div>\r\n    )\r\n};","// import logo from './logo.svg';\nimport { Header } from './components/header';\nimport { CustomizePanel } from './components/CustomizePanel';\nimport { ElevationChart } from './components/ElevationChart';\nimport './App.css';\nimport {useState, useEffect} from 'react';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const [aidStations, setAidStations] = useState([]);\n\n  const [customs, setCustoms] = useState({\n    file: '',\n    title: '',\n    lineColor: '#ff0000ad',\n    lineWidth: 3,\n    showElevationLines: true,\n    showDistanceLines: true,\n    fontSize: 14,\n    unit: 'standard',\n    aidStations: [{distance: 0, size: 1, color: \"#000000ad\"}]\n  });\n  \n  const [chartIsLoaded, setChartIsLoaded] = useState(false);\n\n  useEffect(() => {\n    if(data){\n      // console.log(data);\n    }\n  }, [data])\n\n  // useEffect(() => {\n\n  // }, [customs])\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"flex \">\n        <div className=\"w-3/12  max-w-md \">\n          <CustomizePanel onUpload={setData} customs={customs} setCustoms={setCustoms} updateAidStations={setAidStations} />\n        </div>\n        <main className=\"w-9/12\">\n          {\n            chartIsLoaded && \n            <div className=\"flex justify-end px-8\">\n              <button className=\"save-button whitespace-nowrap inline-flex rounded-md bg-blue-500 my-5 py-2 px-10 text-base font-semibold uppercase text-white hover:bg-opacity-90\">Save</button>\n          </div>\n          }\n\n          <ElevationChart \n            elevationData={data} \n            onChartLoad={setChartIsLoaded} \n            aidStations={aidStations}\n            customs={customs} />\n\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}