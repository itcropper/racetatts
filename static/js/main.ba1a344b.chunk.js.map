{"version":3,"sources":["images/logo.png","components/header.jsx","pages/Confirm.jsx","utilities/gpxparser.jsx","components/AidStations.jsx","components/CustomizePanel.jsx","components/ElevationChart.jsx","utilities/svg2image.js","pages/Design.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","class","href","src","logo","alt","Confirm","imagePath","submit","useRef","inputClassString","useEffect","submitImage","fetch","method","body","JSON","stringify","current","addEventListener","remove","className","for","type","id","onChange","placeholder","ref","distance","pt1","pt2","calcCrow","lat","lon","lat1","lon1","lat2","lon2","dLat","toRad","dLon","a","Math","sin","cos","atan2","sqrt","v","PI","AidStationRow","size","color","onUpdate","useState","dist","setDist","s","setS","c","setC","distRef","sizeRef","value","name","e","currentTarget","circleSpacing","colors","hex","AidStations","updateStations","_defaultStation","stationList","setStationsList","updateStation","station","st","find","b","stIdx","findIndex","updatedStation","updatedStationList","map","i","onClick","newStation","length","slice","CustomizePanel","onUpload","customs","setCustoms","updateAidStations","lineColor","state","setState","files","reader","FileReader","event","gpXml","xmlString","DOMParser","parseFromString","parsedData","toGeoJSON","gpx","features","geometry","coordinates","point","arr","index","elevation","segmentLength","forEach","d","km","miles","parseFloat","toFixed","processData","target","result","readAsText","accept","onKeyUp","title","lineWidth","checked","showElevationLines","version","viewBox","xmlns","fill","fillRule","transform","showDistanceLines","fontSize","htmlFor","_transition_","ElevationChart","xAxis","yAxis","elevationData","onChartLoad","aidStations","container","top","right","bottom","left","margin","width","setWidth","height","setHeight","path","setPath","setLineColor","setLineWidth","chartTitle","setChartTitle","setShowElevationLines","setShowDistanceLines","setFontSize","units","y","x","svg","scaleLinear","range","parseInt","offsetWidth","domain","stationDot","select","stationLine","empty","append","attr","xPos","r","max","cy","cx","innerHTML","axisBottom","scale","ticks","axisLeft","pt","minDomain","min","maxDomain","call","style","text","plotLine","line","curve","curveBasis","datum","drawChart","transition","duration","selectAll","convertToImage","headers","mode","img","req","json","Design","onSave","data","setData","setAidStations","chart","file","unit","chartIsLoaded","setChartIsLoaded","history","useHistory","saveAsJpg","querySelector","image","response","push","App","previewImage","setPreviewImage","basename","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba1a344b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.a0b3c75b.png\";","import React from 'react'\r\nimport logo from \"../images/logo.png\"\r\n\r\nexport const Header = () => {\r\n\r\n    return (\r\n<header class=\"bg-indigo-600\">\r\n  <nav class=\"px-2\" aria-label=\"Top\">\r\n    <div class=\"w-full py-6 flex items-center justify-between border-b border-indigo-500 lg:border-none\">\r\n      <div class=\"flex items-center\">\r\n        <a href=\"#\">\r\n          <span class=\"sr-only\">Workflow</span>\r\n          <img class=\"h-10 w-auto\" src={logo} alt=\"\" />\r\n        </a>\r\n        <div class=\"hidden ml-10 space-x-8 lg:block\">\r\n          <a href=\"#\" class=\"text-base font-medium text-white hover:text-indigo-50\" key=\"Solutions\">\r\n            Solutions\r\n          </a>\r\n\r\n          <a href=\"#\" class=\"text-base font-medium text-white hover:text-indigo-50\" key=\"Pricing\">\r\n            Pricing\r\n          </a>\r\n\r\n          <a href=\"#\" class=\"text-base font-medium text-white hover:text-indigo-50\" key=\"Docs\">\r\n            Docs\r\n          </a>\r\n\r\n          <a href=\"#\" class=\"text-base font-medium text-white hover:text-indigo-50\" key=\"Company\">\r\n            Company\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div class=\"ml-10 space-x-4\">\r\n        <a href=\"#\" class=\"inline-block bg-indigo-500 py-2 px-4 border border-transparent rounded-md text-base font-medium text-white hover:bg-opacity-75\">Sign in</a>\r\n        <a href=\"#\" class=\"inline-block bg-white py-2 px-4 border border-transparent rounded-md text-base font-medium text-indigo-600 hover:bg-indigo-50\">Sign up</a>\r\n      </div>\r\n    </div>\r\n    <div class=\"py-4 flex flex-wrap justify-center space-x-6 lg:hidden\">\r\n      <a href=\"#\" class=\"text-base font-medium text-white hover:text-indigo-50\" key=\"Solutions\">\r\n        Solutions\r\n      </a>\r\n\r\n      <a href=\"#\" class=\"text-base font-medium text-white hover:text-indigo-50\" key=\"Pricing\">\r\n        Pricing\r\n      </a>\r\n\r\n      <a href=\"#\" class=\"text-base font-medium text-white hover:text-indigo-50\" key=\"Docs\">\r\n        Docs\r\n      </a>\r\n\r\n      <a href=\"#\" class=\"text-base font-medium text-white hover:text-indigo-50\" key=\"Company\">\r\n        Company\r\n      </a>\r\n    </div>\r\n  </nav>\r\n</header>\r\n    );\r\n}","\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nexport const Confirm = ({ imagePath }) => {\r\n\r\n    const submit = useRef();\r\n\r\n    const inputClassString = \"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-4 pl-4 my-4\";\r\n\r\n    useEffect(() => {\r\n\r\n        const submitImage = () => fetch('/api/submit-confirmation', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                imagePath\r\n            })\r\n        });\r\n\r\n        submit.current.addEventListener('click', submitImage);\r\n\r\n        return () => {\r\n            submit.current.remove('click', submitImage);\r\n        }\r\n\r\n    }, [imagePath]);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"flex w-full\">\r\n\r\n                <div class=\"w-1/2 h-full px-8\">\r\n                    <div className=\"flex flex-col\">\r\n                        <p className=\"text-2xl my-4\">Contact Information</p>\r\n                        <label for=\"email-input\" className=\"text-xl my-2 text-gray-400\">\r\n                            Email Address\r\n                            <input type=\"email\" className={inputClassString} id=\"email-input\" onChange={() => { }} placeholder=\"Email\" />\r\n                        </label>\r\n\r\n                        <p className=\"text-2xl my-4\">Payment Details</p>\r\n                        <label for=\"card-number-input\" className=\"text-xl my-2 text-gray-400\">\r\n                            Card Number\r\n                            <input type=\"text\" className={inputClassString} id=\"card-number-input\" onChange={() => { }} placeholder=\"---- ---- ---- ----\" />\r\n                        </label>\r\n                        <div class=\"flex flex-row\">\r\n                            <label for=\"card-exp-input\" className=\"text-xl my-2 text-gray-400 w-1/2 pr-4\">\r\n                                Expiration Date\r\n                                <input type=\"text\" className={inputClassString} id=\"card-exp-input\" onChange={() => { }} placeholder=\"---- ---- ---- ----\" />\r\n                            </label>\r\n\r\n                            <label for=\"card-cvc-input\" className=\"text-xl my-2 text-gray-400 w-1/2 pl-4\">\r\n                                CVC Number\r\n                                <input type=\"text\" className={inputClassString} id=\"card-cvc-input\" onChange={() => { }} placeholder=\"---- ---- ---- ----\" />\r\n                            </label>\r\n\r\n                        </div>\r\n\r\n                        <p className=\"text-2xl my-4\">Shipping Information</p>\r\n                        <label for=\"name-input\" className=\"text-xl my-2 text-gray-400\">\r\n                            Name\r\n                            <input type=\"email\" className={inputClassString} id=\"name-input\" onChange={() => { }} placeholder=\"Email\" />\r\n                        </label>\r\n\r\n                        <label for=\"address-input\" className=\"text-xl my-2 text-gray-400\">\r\n                            Address\r\n                            <input type=\"email\" className={inputClassString} id=\"address-input\" onChange={() => { }} placeholder=\"Email\" />\r\n                        </label>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"bg-gray-200 w-1/2 h-full\">\r\n\r\n                    <div className=\"flex flex-col w-10/12 justify-center\">\r\n                        <div className=\"flex flex-col\">\r\n                            <p className=\"text-md text-gray-400\">Amount Due</p>\r\n                            <p className=\"text-xl text-gray-600\">$14.00</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <img src={`/api/image-preview?image=${imagePath}`} />\r\n\r\n\r\n\r\n\r\n                    <div className=\"block\">\r\n\r\n                        <button\r\n                            ref={submit}\r\n                            className=\"save-button whitespace-nowrap inline-flex rounded-md bg-blue-500 my-5 py-2 px-10 text-base font-semibold uppercase text-white hover:bg-opacity-90\">Submit & Pay</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","\r\nimport toGeoJSON from '@mapbox/togeojson';\r\n\r\nconst distance = ({ pt1, pt2 }) => calcCrow(pt1.lat, pt1.lon, pt2.lat, pt2.lon);\r\n\r\nconst calcCrow = (lat1, lon1, lat2, lon2) => {\r\n    var R = 6371; // km\r\n    var dLat = toRad(lat2 - lat1);\r\n    var dLon = toRad(lon2 - lon1);\r\n    lat1 = toRad(lat1);\r\n    lat2 = toRad(lat2);\r\n\r\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var d = R * c;\r\n    return d;\r\n  }\r\n\r\n  // Converts numeric degrees to radians\r\nconst toRad = (v) => v * Math.PI / 180;\r\n\r\nexport const processData = (gpXml) => {\r\n\r\n    const xmlString = (new DOMParser()).parseFromString(gpXml, \"text/xml\")\r\n\r\n    const gpxData = toGeoJSON.gpx(xmlString);\r\n\r\n    let parsedData = gpxData.features[0].geometry.coordinates.map((point, i, arr) => (\r\n      { \r\n        index: i, \r\n        elevation: point[2], \r\n        distance: 0,\r\n        segmentLength: (i === 0 \r\n          ? 0 \r\n          : distance({ \r\n            pt1: { \r\n              lat: arr[i][0], \r\n              lon: arr[i][1] \r\n            }, \r\n            pt2: { \r\n              lat: arr[i - 1][0], \r\n              lon: arr[i - 1][1] \r\n            } \r\n          })) \r\n        }));\r\n\r\n    parsedData.forEach((d,i,arr) => d.distance = d.segmentLength + (i === 0 ? 0 : arr[i-1].distance));\r\n\r\n    parsedData = parsedData.map((point, i, arr) => {\r\n      const km = arr[i].distance;\r\n      const miles = km * 0.621371;\r\n      return {\r\n        ...point, \r\n        distance: {\r\n          km: parseFloat(km.toFixed(3)),\r\n          miles: parseFloat(miles.toFixed(3))\r\n        }\r\n      };\r\n    });\r\n\r\n    return parsedData;\r\n}","import React, {useEffect, useState, useRef} from 'react'\r\nimport { CirclePicker } from 'react-color';\r\n\r\nconst AidStationRow = ({distance = 0, size = 0, color = \"#000000\", id, onUpdate}) => {\r\n\r\n    const [dist, setDist] = useState(distance);\r\n    const [s, setS] = useState(size);\r\n    const [c, setC] = useState(color);\r\n\r\n    const distRef = useRef(null);\r\n    const sizeRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        distRef.current.value = dist;\r\n        sizeRef.current.value = s;\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if(JSON.stringify({distance: dist, size: s, color: c, id}) !== JSON.stringify({distance, size, color, id})){\r\n            onUpdate({distance: dist, size: s, color: c, id});\r\n        }\r\n    }, [dist, s, c, id, onUpdate])\r\n\r\n    return (\r\n        <div className=\"aid-station-row mb-4 items-center flex flex-row \">\r\n            <div className=\"flex flex-col\">\r\n                <div className=\"flex flex-row\">\r\n                    <input\r\n                        ref={distRef}\r\n                        className=\"py-2 pl-4 w-6/12 mr-2 focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md\"\r\n                        type=\"number\"\r\n                        placeholder=\"Distance\" \r\n                        name=\"aid-station-distance\" \r\n                        value={dist}\r\n                        onChange={(e) => setDist(e.currentTarget.value)}/>\r\n                    <input\r\n                        ref={sizeRef}\r\n                        className=\"py-2 pl-4 w-2/12 mr-2 focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md\"\r\n                        type=\"number\" \r\n                        placeholder=\"Size\" \r\n                        value={s}\r\n                        name=\"aid-station-size\" \r\n                        onChange={(e) => setS(e.currentTarget.value)} />\r\n                </div>\r\n                <CirclePicker \r\n                    name=\"aid-station-color\" \r\n                    circleSpacing={20}\r\n                    colors={[\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\"]}\r\n                    className=\"circle-picker w-full mr-2 flex justify-between h-20 items-center\" \r\n                    value={c}\r\n                    onChange={e => setC(e.hex)} />\r\n            </div>\r\n            <button className=\"w-1/12\">X</button>\r\n        </div>);\r\n}\r\n\r\nconst objEq = (a, b) => JSON.stringify(a) === JSON.stringify(b);\r\n\r\nexport const AidStations = ({updateStations}) => {\r\n\r\n    const  _defaultStation = {distance: 0, size: 1, color: \"#000000\", id:0}\r\n\r\n    const [stationList, setStationsList] = useState([_defaultStation]);\r\n\r\n    useEffect(() => {\r\n         updateStations(stationList);\r\n        // console.log(stationList);\r\n    }, [JSON.stringify(stationList)]);\r\n\r\n    const addStation = (e) => {\r\n        const newStation = stationList.length ? {...stationList.slice(-1)[0] , id: stationList.length} : _defaultStation;\r\n        setStationsList([...stationList, newStation]);\r\n    }\r\n\r\n    const updateStation = (station) => {\r\n        if(!station){return;}\r\n        let st = stationList.find(s => s.id === station.id);\r\n        if(objEq(st, station)){\r\n            return;\r\n        }\r\n        let stIdx = stationList.findIndex(s => s.id ===station.id);\r\n        if(st){\r\n            const updatedStation = {...st, ...station};\r\n            stationList[stIdx] = updatedStation;\r\n            const updatedStationList = [...stationList];\r\n            setStationsList(updatedStationList);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <p className=\"text-xl mb-2\">Include Aid Stations</p>\r\n            <div className=\"aid-stations-container\">\r\n                {\r\n                    stationList.map((station, i) => <AidStationRow station={station} id={i} onUpdate={updateStation} key={i} />)\r\n                }\r\n            </div>\r\n            <button className=\"add-aid-station whitespace-nowrap inline-flex rounded-md bg-blue-500 py-2 px-3 text-xs font-semibold uppercase text-white hover:bg-opacity-90\" onClick={addStation}>+ Aid Station</button>\r\n        </>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { processData } from '../utilities/gpxparser'\r\nimport { CirclePicker } from 'react-color';\r\nimport { AidStations } from './AidStations';\r\n\r\n\r\n\r\nexport const CustomizePanel = ({ onUpload, customs, setCustoms, updateAidStations }) => {\r\n\r\n    const [data, setData] = useState(null);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [lineWidth, setLineWidth] = useState(3);\r\n    const [lineColor, setLineColor] = useState(customs.lineColor || '#9c27b0');\r\n    const [showElevationLines, setShowElevationLines] = useState(true);\r\n    const [showDistanceLines, setShowDistanceLines] = useState(true);\r\n    const [state, setState] = useState(customs);\r\n\r\n    //const [aidStations, setAidStations] = useState(customs.aidStations);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(aidStations);\r\n    // }, [aidStations]);\r\n\r\n    // useEffect(() => setState({...state, aidStations}), [aidStations]);\r\n\r\n    // useEffect(() => {\r\n    //     setState({...state, lineColor, lineWidth, title, showElevationLines, showDistanceLines});\r\n    // }, [lineColor, lineWidth, title]);\r\n\r\n    useEffect(() => {\r\n        setCustoms(state);\r\n    }, [state])\r\n\r\n\r\n    // function processData(gpXml) {\r\n\r\n    //     const xmlString = (new DOMParser()).parseFromString(gpXml, \"text/xml\")\r\n\r\n    //     const gpxData = toGeoJSON.gpx(xmlString);\r\n\r\n    //     const parsedData = gpxData.features[0].geometry.coordinates.map((point, i, arr) => ({ index: i, elevation: point[2], distance: (i == 0 ? 0 : distance({ pt1: { lat: arr[i][0], lon: arr[i][1] }, pt2: { lat: arr[i - 1][0], lon: arr[i - 1][1] } })) }));\r\n\r\n    //     parsedData.forEach((point, i, arr) => point.distance = i == 0 ? 0 : point.distance + arr[i - 1].distance)\r\n\r\n    //     parsedData.forEach((point, i, arr) => point.distance = parseFloat(point.distance.toFixed(3)))\r\n\r\n    //     setData(parsedData);\r\n    //   }\r\n\r\n\r\n\r\n    function loadData(e) {\r\n        const files = e.currentTarget.files[0];\r\n\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', (event) => {\r\n            onUpload(processData(event.target.result));\r\n        });\r\n        reader.readAsText(files);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-11/12 px-2 shadow-xl h-full\">\r\n            <h2 className=\"text-3xl\">Customize</h2>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Upload File</p>\r\n                <input name=\"gps-file\"\r\n                    onChange={loadData}\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"file\" placeholder=\"race.gpx\" accept=\".gpx, .kml\" />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Title</p>\r\n                <input name=\"chart-title\"\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"text\"\r\n                    placeholder=\"Crush It!\"\r\n                    onKeyUp={e => setState({ ...state, title: e.currentTarget.value })} />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Line Color</p>\r\n                <CirclePicker onChange={e => setState({ ...state, lineColor: e.hex })} />\r\n                {/* <input type=\"color\"\r\n                    name=\"line-color\" \r\n                    className=\"w-4/12 ml-2 h-10\" \r\n                    value={lineColor} \r\n                    onChange={e => setState({...state, lineColor: e.currentTarget.value})} /> */}\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Line Width</p>\r\n                <input name=\"line-width\"\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"number\"\r\n                    placeholder=\"3\"\r\n                    onChange={e => setState({ ...state, lineWidth: e.currentTarget.value })} />\r\n            </div>\r\n\r\n\r\n            <div className=\"customize-field my-4 \">\r\n                <p className=\"text-xl mb-2\">Lines</p>\r\n                <div className=\"flex justify-start\">\r\n                    <div className=\"mr-8\">\r\n                        <p className=\"text-md mb-2\">Show Elevations</p>\r\n                        <input type=\"checkbox\" name=\"show-elevation-axis\" value=\"yes\" className=\"opacity-0 absolute h-8 w-8\" checked={state.showElevationLines} onChange={e => setState({ ...state, showElevationLines: e.target.checked })} />\r\n                        <div className=\"bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500\">\r\n                            <svg className=\"fill-current hidden w-3 h-3 text-blue-600 pointer-events-none\" version=\"1.1\" viewBox=\"0 0 17 12\"\r\n                                xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <g fill=\"none\" fillRule=\"evenodd\">\r\n                                    <g transform=\"translate(-9 -11)\" fill=\"#1F73F1\" fillRule=\"nonzero\">\r\n                                        <path\r\n                                            d=\"m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z\" />\r\n                                    </g>\r\n                                </g>\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"mr-8\">\r\n                        <p className=\"text-md mb-2\">Show Distances</p>\r\n                        <input type=\"checkbox\" name=\"show-distance-axis\" value=\"yes\" className=\"opacity-0 absolute h-8 w-8\" checked={state.showDistanceLines} onChange={e => setState({ ...state, showDistanceLines: e.target.checked })} />\r\n                        <div className=\"bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500\">\r\n                            <svg className=\"fill-current hidden w-3 h-3 text-blue-600 pointer-events-none\" version=\"1.1\"\r\n                                viewBox=\"0 0 17 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <g fill=\"none\" fillRule=\"evenodd\">\r\n                                    <g transform=\"translate(-9 -11)\" fill=\"#1F73F1\" fillRule=\"nonzero\">\r\n                                        <path\r\n                                            d=\"m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z\" />\r\n                                    </g>\r\n                                </g>\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Font Size</p>\r\n                <input\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    onChange={e => setState({ ...state, fontSize: e.currentTarget.value })}\r\n                    type=\"Number\" />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4 \">\r\n                <p className=\"text-xl mb-2\">Units</p>\r\n                <div className=\"flex justify-around flex-col pl-8\">\r\n                    <div className=\"flex flex-row items-baseline\">\r\n                        <input id=\"unit-standard\" className=\"\" type=\"radio\" name=\"unit\" value=\"standard\" checked onChange={() => { }} />\r\n                        <label htmlFor=\"unit-standard\" className=\"pl-2 mb-1 text-lg\">Standard</label>\r\n                    </div>\r\n                    <div className=\"flex flex-row items-baseline\">\r\n                        <input id=\"unit-metric\" className=\"\" type=\"radio\" name=\"unit\" value=\"metric\" checked onChange={() => { }} />\r\n                        <label htmlFor=\"unit-metric\" className=\"pl-2 mb-1 text-lg\">Metric</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <AidStations updateStations={updateAidStations} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { select, scaleLinear, min, max, axisBottom, axisLeft, line, curveBasis } from 'd3';\r\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport \"./ElevationChart.css\"\r\n\r\nconst _transition_ = 800;\r\n\r\nexport const ElevationChart = ({ elevationData, onChartLoad, aidStations, customs }) => {\r\n\r\n  let xAxis, yAxis;\r\n\r\n  const container = useRef(null);\r\n  const [margin, setMargin] = useState({ top: 20, right: 50, bottom: 30, left: 50 });\r\n  const [width, setWidth] = useState(0);\r\n  const [height, setHeight] = useState(0);\r\n  const [path, setPath] = useState(null);\r\n  const [lineColor, setLineColor] = useState(customs.lineColor || \"#ff0000ad\");\r\n  const [lineWidth, setLineWidth] = useState(customs.lineWidth || 3);\r\n  const [chartTitle, setChartTitle] = useState(customs.title || '');\r\n  const [showElevationLines, setShowElevationLines] = useState(customs.showElevationLines);\r\n  const [showDistanceLines, setShowDistanceLines] = useState(customs.showDistanceLines);\r\n  const [fontSize, setFontSize] = useState(customs.fontSize);\r\n  const [units, setUnits] = useState('km');\r\n  const y = useRef(null);\r\n  const x = useRef(null);\r\n\r\n  let svg = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!x.current) {\r\n      x.current = scaleLinear();\r\n    }\r\n    if (!y.current) {\r\n      y.current = scaleLinear();\r\n    }\r\n    x.current.range([0, width]);\r\n    y.current.range([height, 0]);\r\n  }, [width, height])\r\n\r\n  useEffect(() => setHeight(parseInt('' + (width * 0.3)) - margin.top - margin.bottom), [width]);\r\n  useEffect(() => setWidth(0.95 * (container.current.offsetWidth - margin.left - margin.right)), []);\r\n\r\n  useEffect(() => {\r\n    if (!aidStations || !elevationData) {\r\n      return;\r\n    }\r\n    if (!elevationData.length) {\r\n      return;\r\n    }\r\n    if (!x.current || !y.current) {\r\n      return;\r\n    }\r\n    if (JSON.stringify(x.current.domain()) === JSON.stringify([0, 1]) ||\r\n      JSON.stringify(y.current.domain()) === JSON.stringify([0, 1])) {\r\n      return;\r\n    }\r\n\r\n    aidStations.forEach(station => {\r\n\r\n      const id = 'aid-station-' + (parseInt(station.id));\r\n      let stationDot = svg.current.select('#' + id);\r\n      let stationLine = svg.current.select('#' + id + '--line');\r\n\r\n      if (stationDot.empty()) {\r\n        stationDot = svg.current.append('circle')\r\n          .attr('id', id)\r\n\r\n      }\r\n      if(stationLine.empty()){\r\n        stationLine = svg.current.append('line')\r\n          .attr('class', \"x-axis\")\r\n          .attr('id', id + '--line');\r\n      }\r\n\r\n      const distance = parseFloat(station.distance || 0);\r\n      let i = 0;\r\n      let xPos = 0;\r\n      while (xPos <= distance && i < elevationData.length) {\r\n        xPos = elevationData[i].distance[units];\r\n        i++;\r\n      }\r\n\r\n      const r = Math.max(parseFloat(station.size || '0'), 3)\r\n      const cy = y.current(elevationData[i].elevation);\r\n      const cx = x.current(distance);\r\n\r\n      stationDot.attr('cx', cx)\r\n        .attr('cy', cy)\r\n        .attr('r', r + \"px\")\r\n        .attr('stroke-width', r + \"px\")\r\n        .attr('fill', station.color || \"#ff0000\")\r\n        .attr('stroke', (station.color || \"#ff0000\") + \"22\");\r\n\r\n      stationLine\r\n        .attr('x1', cx)\r\n        .attr('x2', cx)\r\n        .attr('y1', cy)\r\n        .attr('y2', y.current(0))\r\n        .attr('fill', 'none')\r\n        .attr('stroke', (station.color || \"#ff0000\") + \"55\")\r\n        .attr('stroke-width', '2px')\r\n        .attr('stroke-dasharray', \"6,10\");\r\n    });\r\n\r\n  }, [aidStations, elevationData])\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    onChartLoad(elevationData !== null && elevationData.length !== 0);\r\n    if (!container.current || !x.current || !y.current) {\r\n      return;\r\n    }\r\n    if (svg.current) {\r\n      svg.current.remove();\r\n      container.current.innerHTML = '';\r\n    }\r\n\r\n    svg.current = select(\"#elevation-chart\").append(\"svg\")\r\n      .attr(\"width\", width + margin.left + margin.right)\r\n      .attr(\"height\", height + margin.top + margin.bottom)\r\n      .append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n    xAxis = axisBottom().scale(x.current).ticks(10);\r\n    yAxis = axisLeft().scale(y.current).ticks(5);\r\n\r\n    \r\n    if (elevationData && elevationData.length) {\r\n      drawChart()\r\n    }\r\n\r\n    return () => {\r\n      if(svg.current){\r\n        svg.current.remove();\r\n      }\r\n      if(container.current){\r\n        container.current.innerHTML = '';\r\n      }\r\n    }\r\n\r\n  }, [elevationData]);\r\n\r\n  useEffect(() => {\r\n\r\n    select('.elevation-path')\r\n      .transition()\r\n      .duration(_transition_)\r\n      .style(\"stroke\", customs.lineColor || 'blue')\r\n      .style('stroke-width', `${customs.lineWidth || 3}px`);\r\n\r\n  }, [customs]);\r\n\r\n  useEffect(() => select('.chart-title').text(chartTitle), [chartTitle]);\r\n  useEffect(() => {\r\n    select('.x-axis').style('font-size', fontSize + \"px\");\r\n    select('.y-axis').style('font-size', fontSize + \"px\");\r\n  }, [fontSize]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (lineColor != customs.lineColor) {\r\n      setLineColor(customs.lineColor);\r\n    }\r\n    if (chartTitle != customs.title) {\r\n      setChartTitle(customs.title);\r\n    }\r\n    if (lineWidth != customs.lineWidth) {\r\n      setLineWidth(customs.lineWidth);\r\n    }\r\n    if (showElevationLines != customs.showElevationLines) {\r\n      setShowElevationLines(customs.showElevationLines);\r\n    }\r\n    if (showDistanceLines != customs.showDistanceLines) {\r\n      setShowDistanceLines(customs.showDistanceLines);\r\n    }\r\n\r\n    if (fontSize != customs.fontSize) {\r\n      setFontSize(customs.fontSize);\r\n    }\r\n  }, [customs])\r\n\r\n  useEffect(() => {\r\n    if (!svg.current) {\r\n      return;\r\n    }\r\n    svg.current.selectAll('.y-axis,.horizontalGrid-start,.horizontalGrid-lowest')\r\n      .transition()\r\n      .duration(_transition_)\r\n      .style('opacity', showElevationLines ? 1 : 0);\r\n\r\n  }, [showElevationLines])\r\n\r\n  useEffect(() => {\r\n    if (!svg.current) {\r\n      return;\r\n    }\r\n    svg.current.selectAll('.x-axis')\r\n      .transition()\r\n      .duration(_transition_)\r\n      .style('opacity', showDistanceLines ? 1 : 0);\r\n\r\n  }, [showDistanceLines])\r\n\r\n  useEffect(() => {\r\n    path && path.datum(elevationData)\r\n      .transition()\r\n      .duration(1000)\r\n      .attr('fill', 'none')\r\n      .style(\"stroke-width\", `${customs.lineWidth}px`)\r\n  }, [lineWidth]);\r\n\r\n  useEffect(() => {\r\n    path && path.datum(elevationData)\r\n      .transition()\r\n      .duration(_transition_)\r\n      .attr('fill', 'none')\r\n      .style(\"stroke\", customs.lineColor)\r\n  }, [lineColor]);\r\n\r\n  function drawChart() {\r\n    x.current.domain([0, max(elevationData, pt => pt.distance[units === 'km' ? 'km' : 'miles'])]);\r\n\r\n    const minDomain = min(elevationData, pt => pt.elevation);\r\n    const maxDomain = max(elevationData, pt => pt.elevation)\r\n\r\n    y.current.domain([\r\n      minDomain - minDomain * 0.05,\r\n      maxDomain * 1.05\r\n    ]);\r\n\r\n    svg.current.append(\"g\")\r\n      .attr(\"class\", \"x-axis\")\r\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n      .call(xAxis);\r\n\r\n    svg.current.append(\"g\")\r\n      .attr(\"class\", \"y-axis\")\r\n      .call(yAxis);\r\n\r\n\r\n    svg.current.append(\"line\")\r\n      .attr('class', \"horizontalGrid-start\")\r\n      .attr('x1', 0)\r\n      .attr('x2', x.current(elevationData[elevationData.length - 1].index))\r\n      .attr('y1', y.current(elevationData[0].elevation))\r\n      .attr('y2', y.current(elevationData[0].elevation))\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'black')\r\n      .attr('stroke-width', '1px')\r\n      .attr('stroke-dasharray', \"3,3\");\r\n\r\n    svg.current.append(\"line\")\r\n      .attr('class', \"horizontalGrid-lowest\")\r\n      .attr('x1', 0)\r\n      .attr('x2', x.current(elevationData[elevationData.length - 1].index))\r\n      .attr('y1', y.current(min(elevationData, pt => pt.elevation)))\r\n      .attr('y2', y.current(min(elevationData, pt => pt.elevation)))\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'black')\r\n      .attr('stroke-width', '2px')\r\n      .attr('stroke-dasharray', \"2, 10\");\r\n\r\n    svg.current.append(\"text\")\r\n      .attr('class', 'chart-title')\r\n      .attr(\"x\", (width / 2))\r\n      //.attr(\"y\", 0 - (margin.top / 2))\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"24px\")\r\n      .text(chartTitle);\r\n\r\n\r\n\r\n    const plotLine = line()\r\n      .curve(curveBasis)\r\n      .x(d => x.current(d.distance[units === 'km' ? 'km' : 'standard']))\r\n      .y(d => y.current(d.elevation));\r\n\r\n\r\n    if (!path) {\r\n      setPath(svg.current.append(\"g\").append(\"path\")\r\n        .datum(elevationData)\r\n        .attr(\"d\", plotLine)\r\n        .attr('stroke', (lineColor || \"#ff2022\"))\r\n        .attr('stroke-width', '3px')\r\n        .attr('fill', 'none')\r\n        .attr('class', 'elevation-path'));\r\n    }\r\n    onChartLoad(true)\r\n  }\r\n\r\n\r\n  return (\r\n    <div id=\"elevation-chart\" class=\"flex justify-center items-center w-full h-full\" ref={container}></div>\r\n  )\r\n};","// var fs = require('fs');\r\n// var svg2img = require('svg2img');\r\n// var btoa = require('btoa');\r\n\r\nasync function convertToImage({name, svg}) {\r\n\r\n    const req = await fetch('/api/draw', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n        mode: 'cors',\r\n        body: JSON.stringify({\r\n            name,\r\n            img: svg\r\n        })\r\n    });\r\n\r\n    return await req.json();\r\n\r\n    // console.log(resp);\r\n\r\n    // let svgString = svg;\r\n    // if(typeof(svg) !== 'string' && svg.innerHTML){\r\n    //     svgString = svg.innerHTML;\r\n    // }\r\n\r\n    // svg2img(svgString, function(error, buffer) {\r\n    //     //returns a Buffer\r\n    //     fs.writeFileSync('foo1.png', buffer);\r\n    // });\r\n}\r\n\r\nexport { convertToImage }","\r\nimport { Header } from '../components/header';\r\nimport { CustomizePanel } from '../components/CustomizePanel';\r\nimport { ElevationChart } from '../components/ElevationChart';\r\nimport './App.css';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { convertToImage } from '../utilities/svg2image';\r\nimport {\r\n  BrowserRouter as Router,\r\n  useHistory\r\n} from \"react-router-dom\";\r\n\r\nexport const Design = ({ onSave }) => {\r\n  const [data, setData] = useState([]);\r\n  const [aidStations, setAidStations] = useState([]);\r\n  const chart = useRef(null);\r\n\r\n  const [customs, setCustoms] = useState({\r\n    file: '',\r\n    title: '',\r\n    lineColor: '#ff0000ad',\r\n    lineWidth: 3,\r\n    showElevationLines: true,\r\n    showDistanceLines: true,\r\n    fontSize: 14,\r\n    unit: 'standard',\r\n    aidStations: [{ distance: 0, size: 1, color: \"#000000ad\" }]\r\n  });\r\n\r\n  const [chartIsLoaded, setChartIsLoaded] = useState(false);\r\n\r\n  let history = useHistory();\r\n\r\n  // useEffect(() => {\r\n  //   if(data && data.length > 1000){\r\n  //     setData(data.slice(0, 1000));\r\n  //   }\r\n  // }, [data])\r\n\r\n  const saveAsJpg = async () => {\r\n    // console.log(chart.current.querySelector('#elevation-chart').innerHTML);\r\n    const result = await convertToImage({\r\n      name: 'chart',\r\n      svg: chart.current.querySelector('#elevation-chart').innerHTML\r\n    });\r\n\r\n    if (result.image && result.response === \"SUCCESS\") {\r\n      onSave(result.image);\r\n      history.push(\"/confirm\");\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div className=\"flex \">\r\n        <div className=\"w-3/12  max-w-md \">\r\n          <CustomizePanel onUpload={setData} customs={customs} setCustoms={setCustoms} updateAidStations={setAidStations} />\r\n        </div>\r\n        <main className=\"w-9/12\">\r\n\r\n          <div class=\"px-4 py-8 pl-0\">\r\n            <div class=\"border-4 border-dashed border-gray-200 rounded-lg h-96 flex items-center\"  ref={chart}>\r\n              <ElevationChart\r\n                elevationData={data}\r\n                onChartLoad={setChartIsLoaded}\r\n                aidStations={aidStations}\r\n                customs={customs} />\r\n            </div>\r\n          </div>\r\n          {\r\n            chartIsLoaded &&\r\n            <div className=\"flex justify-end px-8\">\r\n              <button\r\n                className=\"save-button whitespace-nowrap inline-flex rounded-md bg-blue-500 my-5 py-2 px-10 text-base font-semibold uppercase text-white hover:bg-opacity-90\"\r\n                onClick={saveAsJpg}>Save</button>\r\n            </div>\r\n          }\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}","// import logo from './logo.svg';\nimport { Header } from './components/header';\nimport { useState, useEffect, useRef } from 'react';\nimport { Confirm } from './pages/Confirm';\nimport { Design } from './pages/Design';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory\n} from \"react-router-dom\";\n\nfunction App() {\n\n  const [previewImage, setPreviewImage] = useState(null);\n\n  useEffect(() => {\n\n  }, [previewImage])\n\n  const setImage = (image) => {\n    setPreviewImage(image);\n  }\n\n  return (\n    <Router basename=\"racetatts\">\n      <Header />\n      <Switch>\n        <Route path=\"/confirm\">  <Confirm  imagePath={previewImage} /> </Route>\n        <Route exact path=\"/\"> <Design onSave={setImage} /> </Route>\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}