{"version":3,"sources":["components/header.jsx","utilities/gpxparser.jsx","components/AidStations.jsx","components/CustomizePanel.jsx","components/ElevationChart.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","distance","pt1","pt2","calcCrow","lat","lon","lat1","lon1","lat2","lon2","dLat","toRad","dLon","a","Math","sin","cos","atan2","sqrt","v","PI","AidStationRow","size","color","id","onUpdate","useState","dist","setDist","s","setS","c","setC","useEffect","JSON","stringify","type","placeholder","name","onChange","e","currentTarget","value","circleSpacing","colors","hex","AidStations","updateStations","_defaultStation","stationList","setStationsList","updateStation","station","st","find","b","stIdx","findIndex","updatedStation","updatedStationList","map","i","onClick","newStation","length","slice","CustomizePanel","onUpload","customs","setCustoms","updateAidStations","lineColor","state","setState","files","reader","FileReader","addEventListener","event","gpXml","xmlString","DOMParser","parseFromString","parsedData","toGeoJSON","gpx","features","geometry","coordinates","point","arr","index","elevation","segmentLength","forEach","d","km","miles","parseFloat","toFixed","processData","target","result","readAsText","accept","onKeyUp","title","lineWidth","checked","showElevationLines","version","viewBox","xmlns","fill","fillRule","transform","showDistanceLines","htmlFor","_transition_","ElevationChart","xAxis","yAxis","elevationData","onChartLoad","aidStations","container","useRef","top","right","bottom","left","margin","width","setWidth","height","setHeight","path","setPath","setLineColor","setLineWidth","chartTitle","setChartTitle","setShowElevationLines","setShowDistanceLines","units","y","x","svg","current","scaleLinear","range","parseInt","offsetWidth","domain","stationDot","select","stationLine","empty","append","attr","xPos","r","max","cy","cx","remove","innerHTML","axisBottom","scale","ticks","axisLeft","pt","minDomain","min","maxDomain","call","style","text","plotLine","line","curve","curveBasis","datum","drawChart","transition","duration","selectAll","ref","App","data","setData","setAidStations","file","fontSize","unit","chartIsLoaded","setChartIsLoaded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ba14bed.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n\r\n    return (\r\n        <header className=\"mb-10 px-10\">\r\n            <h1 className=\"text-4xl\">RaceTats</h1>\r\n            <p className=\"py-4\">Upload your race file to create a custom elevation profile.</p>\r\n            <p className=\"py-4\">Then we send you a temporary tatoo for you to use on race day!</p>\r\n        </header>\r\n    );\r\n}","\r\nimport toGeoJSON from '@mapbox/togeojson';\r\n\r\nconst distance = ({ pt1, pt2 }) => calcCrow(pt1.lat, pt1.lon, pt2.lat, pt2.lon);\r\n\r\nconst calcCrow = (lat1, lon1, lat2, lon2) => {\r\n    var R = 6371; // km\r\n    var dLat = toRad(lat2 - lat1);\r\n    var dLon = toRad(lon2 - lon1);\r\n    lat1 = toRad(lat1);\r\n    lat2 = toRad(lat2);\r\n\r\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var d = R * c;\r\n    return d;\r\n  }\r\n\r\n  // Converts numeric degrees to radians\r\nconst toRad = (v) => v * Math.PI / 180;\r\n\r\nexport const processData = (gpXml) => {\r\n\r\n    const xmlString = (new DOMParser()).parseFromString(gpXml, \"text/xml\")\r\n\r\n    const gpxData = toGeoJSON.gpx(xmlString);\r\n\r\n    let parsedData = gpxData.features[0].geometry.coordinates.map((point, i, arr) => (\r\n      { \r\n        index: i, \r\n        elevation: point[2], \r\n        distance: 0,\r\n        segmentLength: (i === 0 \r\n          ? 0 \r\n          : distance({ \r\n            pt1: { \r\n              lat: arr[i][0], \r\n              lon: arr[i][1] \r\n            }, \r\n            pt2: { \r\n              lat: arr[i - 1][0], \r\n              lon: arr[i - 1][1] \r\n            } \r\n          })) \r\n        }));\r\n\r\n    parsedData.forEach((d,i,arr) => d.distance = d.segmentLength + (i === 0 ? 0 : arr[i-1].distance));\r\n\r\n    parsedData = parsedData.map((point, i, arr) => {\r\n      const km = arr[i].distance;\r\n      const miles = km * 0.621371;\r\n      return {\r\n        ...point, \r\n        distance: {\r\n          km: parseFloat(km.toFixed(3)),\r\n          miles: parseFloat(miles.toFixed(3))\r\n        }\r\n      };\r\n    });\r\n\r\n    return parsedData;\r\n}","import React, {useEffect, useState} from 'react'\r\nimport { CirclePicker } from 'react-color';\r\n\r\nconst AidStationRow = ({distance = 0, size = 0, color = \"#000000\", id, onUpdate}) => {\r\n\r\n    const [dist, setDist] = useState(distance);\r\n    const [s, setS] = useState(size);\r\n    const [c, setC] = useState(color);\r\n\r\n\r\n    useEffect(() => {\r\n        if(JSON.stringify({distance: dist, size: s, color: c, id}) !== JSON.stringify({distance, size, color, id})){\r\n            onUpdate({distance: dist, size: s, color: c, id});\r\n        }\r\n    }, [dist, s, c, id, onUpdate])\r\n\r\n    return (\r\n        <div className=\"aid-station-row mb-4 items-center flex flex-row \">\r\n            <div className=\"flex flex-col\">\r\n                <div className=\"flex flex-row\">\r\n                    <input\r\n                        className=\"py-2 pl-4 w-6/12 mr-2 focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md\"\r\n                        type=\"number\"\r\n                        placeholder=\"Distance\" \r\n                        name=\"aid-station-distance\" \r\n                        onChange={(e) => setDist(e.currentTarget.value)}/>\r\n                    <input\r\n                        className=\"py-2 pl-4 w-2/12 mr-2 focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md\"\r\n                        type=\"number\" \r\n                        placeholder=\"Size\" \r\n                        name=\"aid-station-size\" \r\n                        onChange={(e) => setS(e.currentTarget.value)} />\r\n                </div>\r\n                <CirclePicker \r\n                    name=\"aid-station-color\" \r\n                    circleSpacing={20}\r\n                    colors={[\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\"]}\r\n                    className=\"circle-picker w-full mr-2 flex justify-between h-20 items-center\" \r\n                    value={c}\r\n                    onChange={e => setC(e.hex)} />\r\n            </div>\r\n            <button className=\"w-1/12\">X</button>\r\n        </div>);\r\n}\r\n\r\nconst objEq = (a, b) => JSON.stringify(a) === JSON.stringify(b);\r\n\r\nexport const AidStations = ({updateStations}) => {\r\n\r\n    const  _defaultStation = {distance: 0, size: 1, color: \"#000000\", id:0}\r\n\r\n    const [stationList, setStationsList] = useState([_defaultStation]);\r\n\r\n    useEffect(() => {\r\n         updateStations(stationList);\r\n        // console.log(stationList);\r\n    }, [JSON.stringify(stationList)]);\r\n\r\n    const addStation = (e) => {\r\n        const newStation = stationList.length ? {...stationList.slice(-1)[0] , id: stationList.length} : _defaultStation;\r\n        setStationsList([...stationList, newStation]);\r\n    }\r\n\r\n    const updateStation = (station) => {\r\n        if(!station){return;}\r\n        let st = stationList.find(s => s.id === station.id);\r\n        if(objEq(st, station)){\r\n            return;\r\n        }\r\n        let stIdx = stationList.findIndex(s => s.id ===station.id);\r\n        if(st){\r\n            const updatedStation = {...st, ...station};\r\n            stationList[stIdx] = updatedStation;\r\n            const updatedStationList = [...stationList];\r\n            setStationsList(updatedStationList);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <p className=\"text-xl mb-2\">Include Aid Stations</p>\r\n            <div className=\"aid-stations-container\">\r\n                {\r\n                    stationList.map((station, i) => <AidStationRow station={station} id={i} onUpdate={updateStation} key={i} />)\r\n                }\r\n            </div>\r\n            <button className=\"add-aid-station whitespace-nowrap inline-flex rounded-md bg-blue-500 py-2 px-3 text-xs font-semibold uppercase text-white hover:bg-opacity-90\" onClick={addStation}>+ Aid Station</button>\r\n        </>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {processData } from '../utilities/gpxparser'\r\nimport { CirclePicker  } from 'react-color';\r\nimport { AidStations } from './AidStations';\r\n\r\n\r\n\r\nexport const CustomizePanel = ({onUpload, customs, setCustoms, updateAidStations}) => {\r\n\r\n    const [data, setData] = useState(null);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [lineWidth, setLineWidth] = useState(3);\r\n    const [lineColor, setLineColor] = useState(customs.lineColor || '#9c27b0');\r\n    const [showElevationLines, setShowElevationLines] = useState(true);\r\n    const [showDistanceLines, setShowDistanceLines] = useState(true);\r\n    const [state, setState] = useState(customs);\r\n\r\n    //const [aidStations, setAidStations] = useState(customs.aidStations);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(aidStations);\r\n    // }, [aidStations]);\r\n\r\n    // useEffect(() => setState({...state, aidStations}), [aidStations]);\r\n\r\n    // useEffect(() => {\r\n    //     setState({...state, lineColor, lineWidth, title, showElevationLines, showDistanceLines});\r\n    // }, [lineColor, lineWidth, title]);\r\n\r\n    useEffect(() => {\r\n        setCustoms(state);\r\n    }, [state])\r\n\r\n\r\n    // function processData(gpXml) {\r\n\r\n    //     const xmlString = (new DOMParser()).parseFromString(gpXml, \"text/xml\")\r\n  \r\n    //     const gpxData = toGeoJSON.gpx(xmlString);\r\n\r\n    //     const parsedData = gpxData.features[0].geometry.coordinates.map((point, i, arr) => ({ index: i, elevation: point[2], distance: (i == 0 ? 0 : distance({ pt1: { lat: arr[i][0], lon: arr[i][1] }, pt2: { lat: arr[i - 1][0], lon: arr[i - 1][1] } })) }));\r\n  \r\n    //     parsedData.forEach((point, i, arr) => point.distance = i == 0 ? 0 : point.distance + arr[i - 1].distance)\r\n  \r\n    //     parsedData.forEach((point, i, arr) => point.distance = parseFloat(point.distance.toFixed(3)))\r\n\r\n    //     setData(parsedData);\r\n    //   }\r\n  \r\n  \r\n  \r\n      function loadData(e) {\r\n        const files = e.currentTarget.files[0];\r\n\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', (event) => {\r\n          onUpload(processData(event.target.result));\r\n        });\r\n        reader.readAsText(files);\r\n  \r\n      }\r\n\r\n    return (\r\n        <div className=\"w-11/12 px-2 shadow-xl h-full\">\r\n            <h2 className=\"text-3xl\">Customize</h2>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Upload File</p>\r\n                <input name=\"gps-file\"\r\n                    onChange={loadData}\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"file\" placeholder=\"race.gpx\" accept=\".gpx, .kml\" />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Title</p>\r\n                <input name=\"chart-title\"\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"text\"\r\n                    placeholder=\"Crush It!\"\r\n                    onKeyUp={e => setState({...state, title: e.currentTarget.value})} />\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Line Color</p>\r\n                <CirclePicker onChange={ e => setState({ ...state, lineColor: e.hex }) }   />\r\n                {/* <input type=\"color\"\r\n                    name=\"line-color\" \r\n                    className=\"w-4/12 ml-2 h-10\" \r\n                    value={lineColor} \r\n                    onChange={e => setState({...state, lineColor: e.currentTarget.value})} /> */}\r\n            </div>\r\n\r\n            <div className=\"customize-field my-4\">\r\n                <p className=\"text-xl  mb-2\">Line Width</p>\r\n                <input name=\"line-width\"\r\n                    className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                    type=\"number\"\r\n                    placeholder=\"3\" \r\n                    onChange={e => setState({...state, lineWidth: e.currentTarget.value})} />\r\n            </div>\r\n\r\n\r\n            <div className=\"customize-field my-4 \">\r\n                <p className=\"text-xl mb-2\">Show Elevation Axis</p>\r\n                <input type=\"checkbox\" name=\"show-elevation-axis\" value=\"yes\" className=\"opacity-0 absolute h-8 w-8\" checked={state.showElevationLines} onChange={e =>setState({...state, showElevationLines: e.target.checked})} />\r\n                <div className=\"bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500\">\r\n                    <svg className=\"fill-current hidden w-3 h-3 text-blue-600 pointer-events-none\" version=\"1.1\" viewBox=\"0 0 17 12\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <g fill=\"none\" fillRule=\"evenodd\">\r\n                            <g transform=\"translate(-9 -11)\" fill=\"#1F73F1\" fillRule=\"nonzero\">\r\n                                <path\r\n                                    d=\"m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z\" />\r\n                            </g>\r\n                        </g>\r\n                    </svg>\r\n                </div>\r\n\r\n                <div className=\"customize-field my-4 \">\r\n                    <p className=\"text-xl mb-2\">Show Distance Axis</p>\r\n                    <input type=\"checkbox\" name=\"show-distance-axis\" value=\"yes\" className=\"opacity-0 absolute h-8 w-8\" checked={state.showDistanceLines} onChange={e =>setState({...state, showDistanceLines: e.target.checked})} />\r\n                    <div\r\n                        className=\"bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500\">\r\n                        <svg className=\"fill-current hidden w-3 h-3 text-blue-600 pointer-events-none\" version=\"1.1\"\r\n                            viewBox=\"0 0 17 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <g fill=\"none\" fillRule=\"evenodd\">\r\n                                <g transform=\"translate(-9 -11)\" fill=\"#1F73F1\" fillRule=\"nonzero\">\r\n                                    <path\r\n                                        d=\"m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z\" />\r\n                                </g>\r\n                            </g>\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"customize-field my-4\">\r\n                        <p className=\"text-xl  mb-2\">Font Size</p>\r\n                        <input\r\n                            className=\"focus:border-light-blue-500 focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-4\"\r\n                            type=\"Number\" />\r\n                    </div>\r\n\r\n                    <div className=\"customize-field my-4 \">\r\n                        <p className=\"text-xl mb-2\">Units</p>\r\n                        <div className=\"flex justify-around flex-col pl-8\">\r\n                            <div className=\"flex flex-row items-baseline\">\r\n                                <input id=\"unit-standard\" className=\"\" type=\"radio\" name=\"unit\" value=\"standard\" checked onChange={() => {}} />\r\n                                <label htmlFor=\"unit-standard\" className=\"pl-2 mb-1 text-lg\">Standard</label>\r\n                            </div>\r\n                            <div className=\"flex flex-row items-baseline\">\r\n                                <input id=\"unit-metric\" className=\"\" type=\"radio\" name=\"unit\" value=\"metric\" checked onChange={() => {}} />\r\n                                <label htmlFor=\"unit-metric\" className=\"pl-2 mb-1 text-lg\">Metric</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"customize-field my-4\">\r\n                        <AidStations  updateStations={updateAidStations} />\r\n                    </div> \r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { select, scaleLinear, min, max, axisBottom, axisLeft, line, curveBasis } from 'd3';\r\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport \"./ElevationChart.css\"\r\n\r\nconst _transition_ = 800;\r\n\r\nexport const ElevationChart = ({ elevationData, onChartLoad, aidStations, customs }) => {\r\n\r\n  let xAxis, yAxis;\r\n\r\n  const container = useRef(null);\r\n  const [margin, setMargin] = useState({ top: 20, right: 50, bottom: 30, left: 50 });\r\n  const [width, setWidth] = useState(0);\r\n  const [height, setHeight] = useState(0);\r\n  const [path, setPath] = useState(null);\r\n  const [lineColor, setLineColor] = useState(customs.lineColor || \"#ff0000ad\");\r\n  const [lineWidth, setLineWidth] = useState(customs.lineWidth || 3);\r\n  const [chartTitle, setChartTitle] = useState(customs.title || '');\r\n  const [showElevationLines, setShowElevationLines] = useState(customs.showElevationLines);\r\n  const [showDistanceLines, setShowDistanceLines] = useState(customs.showDistanceLines);\r\n  const [units, setUnits] = useState('km');\r\n  const y = useRef(null);\r\n  const x = useRef(null);\r\n\r\n  let svg = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!x.current) {\r\n      x.current = scaleLinear();\r\n    }\r\n    if (!y.current) {\r\n      y.current = scaleLinear();\r\n    }\r\n    x.current.range([0, width]);\r\n    y.current.range([height, 0]);\r\n  }, [width, height])\r\n\r\n  useEffect(() => setHeight(parseInt('' + (width * 0.3)) - margin.top - margin.bottom), [width]);\r\n  useEffect(() => setWidth(container.current.offsetWidth - margin.left - margin.right), []);\r\n\r\n  useEffect(() => {\r\n    if (!aidStations || !elevationData) {\r\n      return;\r\n    }\r\n    if (!elevationData.length) {\r\n      return;\r\n    }\r\n    if (!x.current || !y.current) {\r\n      return;\r\n    }\r\n    if (JSON.stringify(x.current.domain()) === JSON.stringify([0, 1]) ||\r\n      JSON.stringify(y.current.domain()) === JSON.stringify([0, 1])) {\r\n      return;\r\n    }\r\n\r\n    aidStations.forEach(station => {\r\n\r\n      const id = 'aid-station-' + (parseInt(station.id));\r\n      let stationDot = svg.current.select('#' + id);\r\n      let stationLine = svg.current.select('#' + id + '--line');\r\n\r\n      if (stationDot.empty()) {\r\n        stationDot = svg.current.append('circle')\r\n          .attr('id', id)\r\n\r\n      }\r\n      if(stationLine.empty()){\r\n        stationLine = svg.current.append('line')\r\n          .attr('class', \"x-axis\")\r\n          .attr('id', id + '--line');\r\n      }\r\n\r\n      const distance = parseFloat(station.distance || 0);\r\n      let i = 0;\r\n      let xPos = 0;\r\n      while (xPos <= distance && i < elevationData.length) {\r\n        xPos = elevationData[i].distance[units];\r\n        i++;\r\n      }\r\n\r\n      const r = Math.max(parseFloat(station.size || '0'), 3)\r\n      const cy = y.current(elevationData[i].elevation);\r\n      const cx = x.current(distance);\r\n\r\n      stationDot.attr('cx', cx)\r\n        .attr('cy', cy)\r\n        .attr('r', r + \"px\")\r\n        .attr('stroke-width', r + \"px\")\r\n        .attr('fill', station.color || \"#ff0000\")\r\n        .attr('stroke', (station.color || \"#ff0000\") + \"22\");\r\n\r\n      stationLine\r\n        .attr('x1', cx)\r\n        .attr('x2', cx)\r\n        .attr('y1', cy)\r\n        .attr('y2', y.current(0))\r\n        .attr('fill', 'none')\r\n        .attr('stroke', (station.color || \"#ff0000\") + \"55\")\r\n        .attr('stroke-width', '2px')\r\n        .attr('stroke-dasharray', \"6,10\");\r\n    });\r\n\r\n  }, [aidStations, elevationData])\r\n\r\n  useEffect(() => {\r\n    onChartLoad(elevationData !== null && elevationData.length !== 0);\r\n    if (!container || !x.current || !y.current) {\r\n      return;\r\n    }\r\n    if (svg.current) {\r\n      svg.current.remove();\r\n      container.current.innerHTML = '';\r\n    }\r\n\r\n    svg.current = select(\"#elevation-chart\").append(\"svg\")\r\n      .attr(\"width\", width + margin.left + margin.right)\r\n      .attr(\"height\", height + margin.top + margin.bottom)\r\n      .append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n    xAxis = axisBottom().scale(x.current).ticks(10);\r\n    yAxis = axisLeft().scale(y.current).ticks(5);\r\n\r\n    \r\n    if (elevationData && elevationData.length) {\r\n      drawChart()\r\n    }\r\n\r\n    return () => {\r\n      svg.current.remove();\r\n      container.current.innerHTML = '';\r\n    }\r\n\r\n  }, [elevationData]);\r\n\r\n  useEffect(() => {\r\n\r\n    select('.elevation-path')\r\n      .transition()\r\n      .duration(_transition_)\r\n      .style(\"stroke\", customs.lineColor || 'blue')\r\n      .style('stroke-width', `${customs.lineWidth || 3}px`);\r\n\r\n  }, [customs]);\r\n\r\n  useEffect(() => {\r\n    select('.chart-title')\r\n      .text(chartTitle);\r\n  }, [chartTitle])\r\n\r\n  useEffect(() => {\r\n\r\n    if (lineColor != customs.lineColor) {\r\n      setLineColor(customs.lineColor);\r\n    }\r\n    if (chartTitle != customs.title) {\r\n      setChartTitle(customs.title);\r\n    }\r\n    if (lineWidth != customs.lineWidth) {\r\n      setLineWidth(customs.lineWidth);\r\n    }\r\n    if (showElevationLines != customs.showElevationLines) {\r\n      setShowElevationLines(customs.showElevationLines);\r\n    }\r\n    if (showDistanceLines != customs.showDistanceLines) {\r\n      setShowDistanceLines(customs.showDistanceLines);\r\n    }\r\n  }, [customs])\r\n\r\n  useEffect(() => {\r\n    if (!svg.current) {\r\n      return;\r\n    }\r\n    svg.current.selectAll('.y-axis,.horizontalGrid-start,.horizontalGrid-lowest')\r\n      .transition()\r\n      .duration(_transition_)\r\n      .style('opacity', showElevationLines ? 1 : 0);\r\n\r\n  }, [showElevationLines])\r\n\r\n  useEffect(() => {\r\n    if (!svg.current) {\r\n      return;\r\n    }\r\n    svg.current.selectAll('.x-axis')\r\n      .transition()\r\n      .duration(_transition_)\r\n      .style('opacity', showDistanceLines ? 1 : 0);\r\n\r\n  }, [showDistanceLines])\r\n\r\n  useEffect(() => {\r\n    path && path.datum(elevationData)\r\n      .transition()\r\n      .duration(1000)\r\n      .attr('fill', 'none')\r\n      .style(\"stroke-width\", `${customs.lineWidth}px`)\r\n  }, [lineWidth]);\r\n\r\n  useEffect(() => {\r\n    path && path.datum(elevationData)\r\n      .transition()\r\n      .duration(_transition_)\r\n      .attr('fill', 'none')\r\n      .style(\"stroke\", customs.lineColor)\r\n  }, [lineColor]);\r\n\r\n  function drawChart() {\r\n    x.current.domain([0, max(elevationData, pt => pt.distance[units === 'km' ? 'km' : 'miles'])]);\r\n\r\n    const minDomain = min(elevationData, pt => pt.elevation);\r\n    const maxDomain = max(elevationData, pt => pt.elevation)\r\n\r\n    y.current.domain([\r\n      minDomain - minDomain * 0.05,\r\n      maxDomain * 1.05\r\n    ]);\r\n\r\n    svg.current.append(\"g\")\r\n      .attr(\"class\", \"x-axis\")\r\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n      .call(xAxis);\r\n\r\n    svg.current.append(\"g\")\r\n      .attr(\"class\", \"y-axis\")\r\n      .call(yAxis);\r\n\r\n\r\n    svg.current.append(\"line\")\r\n      .attr('class', \"horizontalGrid-start\")\r\n      .attr('x1', 0)\r\n      .attr('x2', x.current(elevationData[elevationData.length - 1].index))\r\n      .attr('y1', y.current(elevationData[0].elevation))\r\n      .attr('y2', y.current(elevationData[0].elevation))\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'black')\r\n      .attr('stroke-width', '1px')\r\n      .attr('stroke-dasharray', \"3,3\");\r\n\r\n    svg.current.append(\"line\")\r\n      .attr('class', \"horizontalGrid-lowest\")\r\n      .attr('x1', 0)\r\n      .attr('x2', x.current(elevationData[elevationData.length - 1].index))\r\n      .attr('y1', y.current(min(elevationData, pt => pt.elevation)))\r\n      .attr('y2', y.current(min(elevationData, pt => pt.elevation)))\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'black')\r\n      .attr('stroke-width', '2px')\r\n      .attr('stroke-dasharray', \"2, 10\");\r\n\r\n    svg.current.append(\"text\")\r\n      .attr('class', 'chart-title')\r\n      .attr(\"x\", (width / 2))\r\n      //.attr(\"y\", 0 - (margin.top / 2))\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"24px\")\r\n      .text(chartTitle);\r\n\r\n\r\n\r\n    const plotLine = line()\r\n      .curve(curveBasis)\r\n      .x(d => x.current(d.distance[units === 'km' ? 'km' : 'standard']))\r\n      .y(d => y.current(d.elevation));\r\n\r\n\r\n    if (!path) {\r\n      setPath(svg.current.append(\"g\").append(\"path\")\r\n        .datum(elevationData)\r\n        .attr(\"d\", plotLine)\r\n        .attr('stroke', 'black')\r\n        .attr('stroke-width', '3px')\r\n        .attr('fill', 'none')\r\n        .attr('class', 'elevation-path'));\r\n    }\r\n    onChartLoad(true)\r\n  }\r\n\r\n\r\n  return (\r\n    <div id=\"elevation-chart\" ref={container}></div>\r\n  )\r\n};","// import logo from './logo.svg';\nimport { Header } from './components/header';\nimport { CustomizePanel } from './components/CustomizePanel';\nimport { ElevationChart } from './components/ElevationChart';\nimport './App.css';\nimport {useState, useEffect} from 'react';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const [aidStations, setAidStations] = useState([]);\n\n  const [customs, setCustoms] = useState({\n    file: '',\n    title: '',\n    lineColor: '#ff0000ad',\n    lineWidth: 3,\n    showElevationLines: true,\n    showDistanceLines: true,\n    fontSize: 14,\n    unit: 'standard',\n    aidStations: [{distance: 0, size: 1, color: \"#000000ad\"}]\n  });\n  \n  const [chartIsLoaded, setChartIsLoaded] = useState(false);\n\n  // useEffect(() => {\n  //   if(data && data.length > 1000){\n  //     setData(data.slice(0, 1000));\n  //   }\n  // }, [data])\n\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"flex \">\n        <div className=\"w-3/12  max-w-md \">\n          <CustomizePanel onUpload={setData} customs={customs} setCustoms={setCustoms} updateAidStations={setAidStations} />\n        </div>\n        <main className=\"w-9/12\">\n          {\n            chartIsLoaded && \n            <div className=\"flex justify-end px-8\">\n              <button className=\"save-button whitespace-nowrap inline-flex rounded-md bg-blue-500 my-5 py-2 px-10 text-base font-semibold uppercase text-white hover:bg-opacity-90\">Save</button>\n          </div>\n          }\n\n          <ElevationChart \n            elevationData={data} \n            onChartLoad={setChartIsLoaded} \n            aidStations={aidStations}\n            customs={customs} />\n\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}